[{"path":"https://ngreifer.github.io/optweight/articles/optweight.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using optweight to Estimate Stable Balancing Weights","text":"optweight implements stable balancing weighting (SBW) described Zubizarreta (2015). involves estimating weights aimed adjusting confounding balancing covariates minimizing measure variability weights. SBW also known empirical balancing calibration weighting (Chan, Yam, Zhang 2016) entropy balancing (Källberg Waernbaum 2023). methods related inverse probability weighting (IPW), equivalences SBW IPW (Wang Zubizarreta 2020). IPW typically involves fitting propensity score model probability receiving treatment, SBW estimates weights directly balance covariates. distinction two approaches described detail Chattopadhyay, Hase, Zubizarreta (2020). SBW involves solving following optimization problem: \\(\\mathbf{w}=\\{w_1, \\dots, w_N\\}\\) estimated weights, \\(\\mathbf{s}=\\{s_1, \\dots, s_N\\}\\) sampling weights, \\(\\mathbf{b}=\\{b_1, \\dots, b_N\\}\\) “base” weights, \\(A_i\\) categorical treatment taking values \\(\\\\mathcal{}\\), \\(x_{k,}\\) value covariate \\(\\mathbf{x}_k\\) unit \\(\\). \\(f(\\mathbf{w}, \\mathbf{b},\\mathbf{s})\\) objective function minimize, function estimated weights, base weights, sampling weights. \\(\\delta_k\\) balance tolerance covariate \\(k\\), \\(\\bar{x}_k^*\\) target value covariate \\(k\\), \\(\\varepsilon\\) minimum weight allowed. Generally, \\(f\\) represents measure dispersion base weights, weighted sampling weights. original formulation SBW used \\(f(\\mathbf{w}, \\mathbf{b},\\mathbf{s}) = \\frac{1}{N}\\sum_i{s_i(w_i-b_i)^2}\\), weighted L2 norm. Entropy balancing uses \\(f(\\mathbf{w}, \\mathbf{b},\\mathbf{s}) = \\frac{1}{N}\\sum_i{s_i w_i \\log\\left(\\frac{w_i}{b_i}\\right)}\\), weighted relative entropy estimated base weights. interpretation constraints follows: first constraint scaling constraint establishes meaningful scale weights \\(\\mathbf{w}\\). particular, scale determined base weights \\(\\mathbf{b}\\). second constraint balance constraint. target value \\(\\bar{x}_k^*\\) can chosen covariate, weighted mean covariates treatment group must within tolerance \\(\\delta_k\\) target. also guarantees weighted means treatment groups within tolerance . possible forgo specific target just require weighted means equal . final constraint optional restricts minimum value weights. \\(f\\), weights can unbounded, user require weights fall within range. original formulation SBW used \\(\\varepsilon = 0\\), omitting constraint altogether, allows weights negative, also possible. Asymptotic properties SBW described Wang Zubizarreta (2020). general, weights precise perform well, adding approximate balance constraints (.e., using \\(\\delta_k>0\\)) tends improve precision without greatly affecting bias. also weak double-robustness property weights: estimate consistent either outcome model corresponds balance constraints implicit propensity score model corresponds true propensity score model. Different forms \\(f\\) imply different assumptions propensity score model. Allowing \\(\\varepsilon\\) negative allows possibility negative weights, can improve precision induce extrapolation. turns using linear regression model outcome equivalent using SBW L2 norm, \\(\\delta_k=0\\), \\(\\varepsilon=-\\infty\\) (Chattopadhyay Zubizarreta 2023). Often \\(\\bar{x}_k^*\\) chosen represent known target group, like full sample targeting ATE treated group targeting ATT. can also chosen generalize effect estimate arbitrary target population (Chattopadhyay, Cohn, Zubizarreta 2024). SBWs can generalized continuous treatments, case instead balancing covariate means, treatment-covariate covariances constrained balanced. explored Greifer (2020), Tübbicke (2022), Vegetabile et al. (2021). SBW can also used directly weight sample resemble population, without needing balance two treatment groups. also known known matching-adjusted indirect comparison [MAIC; Phillippo et al. (2020), Signorovitch et al. (2010)]. optweight contains functionality perform operations assess performance. designed user-friendly, compatible syntax used WeightIt, supported cobalt balance assessment, possible expense flexibility. sbw package also implements methods, prioritizing different aspects estimation. Entropy balancing implemented WeightIt, also calls optweight provide simpler interface SBW.","code":""},{"path":"https://ngreifer.github.io/optweight/articles/optweight.html","id":"using-optweight","dir":"Articles","previous_headings":"","what":"Using optweight","title":"Using optweight to Estimate Stable Balancing Weights","text":"main function optweight optweight(), uses formula interface specify treatment, covariates, balance tolerance. functions optweight simplify specification detailed parameters support diagnostics. , ’ll use optweight() estimate weights balance covariates observational study. ’ll use lalonde dataset cobalt target ATT first. treatment treat, outcome re78, variables covariates balance. optweight() can used simply supplying treatment can covariates formula argument, dataset data argument, estimand estimand argument (, ATT). default, optweight() minimizes L2 norm, requires exact mean balance covariates, requires weights greater \\(10^{-8}\\). Using cobalt::bal.tab() output computes weighted balance statistics. expected, mean differences exactly 0 weighted sample. can use summary() examine properties weights: summary() produces information distribution weights, including different measures dispersion weights, corresponds one allowed objective functions minimize. L2 square root mean squared deviation estimated weights base weights (.e., L2 divergence); , base weights 1. See ?summary.optweight information statistics. Lastly, summary() produces weighted original (effective) samples sizes. can use plot() summary() output visualize distribution weights:  targeted ATT, weights control group displayed (treated group weights 1). , ’ll adjust arguments see affects weights.","code":"library(optweight)  data(\"lalonde\", package = \"cobalt\")  head(lalonde) ##   treat age educ   race married nodegree re74 re75    re78 ## 1     1  37   11  black       1        1    0    0  9930.0 ## 2     1  22    9 hispan       0        1    0    0  3595.9 ## 3     1  30   12  black       0        0    0    0 24909.5 ## 4     1  27   11  black       0        1    0    0  7506.1 ## 5     1  33    8  black       0        1    0    0   289.8 ## 6     1  22    9  black       0        1    0    0  4056.5 ow <- optweight(treat ~ age + educ + race + married + nodegree +                   re74 + re75, data = lalonde,                 estimand = \"ATT\") ow ## An optweight object ##  - number of obs.: 614 ##  - norm minimized: \"l2\" ##  - sampling weights: present ##  - base weights: present ##  - treatment: 2-category ##  - estimand: ATT (focal: 1) ##  - covariates: age, educ, race, married, nodegree, re74, re75 cobalt::bal.tab(ow) ## Balance Measures ##                Type Diff.Adj ## age         Contin.       -0 ## educ        Contin.       -0 ## race_black   Binary       -0 ## race_hispan  Binary        0 ## race_white   Binary        0 ## married      Binary       -0 ## nodegree     Binary       -0 ## re74        Contin.       -0 ## re75        Contin.       -0 ##  ## Effective sample sizes ##            Control Treated ## Unadjusted   429.      185 ## Adjusted     108.6     185 summary(ow) ## Summary of weights: ##  ## - Weight ranges: ##         Min                                 Max ## treated   1      ||                       1.    ## control   0 |---------------------------| 6.002 ##  ## - Units with 5 greatest weights by group: ##                                             ##               1      2      3      4      5 ##  treated      1      1      1      1      1 ##             423    388    226    196    118 ##  control 5.5685 5.6016 5.6698 5.9221 6.0023 ##  ##            L2    L1    L∞ Rel Ent # Zeros ## treated 0.    0.    0.       0.         0 ## control 1.717 1.339 5.002    1.23       0 ##  ## - Effective Sample Sizes: ##            Control Treated ## Unweighted   429.      185 ## Weighted     108.6     185 summary(ow) |> plot()"},{"path":"https://ngreifer.github.io/optweight/articles/optweight.html","id":"tols","dir":"Articles","previous_headings":"Using optweight","what":"tols","title":"Using optweight to Estimate Stable Balancing Weights","text":"balance tolerance controlled tols argument. can either single value applied variables vector value covariate. default, tols = 0. Let’s see happens increase tols .02. Now, mean differences less .02. Note default, cobalt::bal.tab() reports standardized mean differences continuous variables raw mean differences binary variables. optweight() standardizes balance tolerances way: default, tols refers largest standardized mean difference allowed continuous variables largest raw mean difference binary variables. change whether tolerances binary continuous variables standardized units , see std.binary std.cont arguments optweight.fit(), optweight() calls hood. Allowing relaxed imbalance also increases ESS. L2 statistic shrunk correspondingly: supply covariate tolerance, named vector must supplied. can sometimes little tedious, helper function, process_tols(), simplifies . Give process_tols() formula dataset (, optionally, initial tolerance value vector thereof), return modifiable vector balance tolerances can supplied optweight(). , ’ll relax constraint race estimate weights. can see covariates race, mean differences .02, race, mean differences .07. led increase ESS due relaxed constraints.","code":"ow2 <- optweight(treat ~ age + educ + race + married + nodegree +                    re74 + re75, data = lalonde,                  estimand = \"ATT\",                  tols = .02)  cobalt::bal.tab(ow2) ## Balance Measures ##                Type Diff.Adj ## age         Contin.     0.02 ## educ        Contin.     0.02 ## race_black   Binary     0.02 ## race_hispan  Binary     0.00 ## race_white   Binary    -0.02 ## married      Binary    -0.02 ## nodegree     Binary     0.02 ## re74        Contin.    -0.02 ## re75        Contin.     0.02 ##  ## Effective sample sizes ##            Control Treated ## Unadjusted   429.      185 ## Adjusted     118.8     185 summary(ow2, weight.range = FALSE) ## Summary of weights: ##  ##            L2    L1    L∞ Rel Ent # Zeros ## treated 0.    0.    0.      0.          0 ## control 1.616 1.267 4.212   1.118       0 ##  ## - Effective Sample Sizes: ##            Control Treated ## Unweighted   429.      185 ## Weighted     118.8     185 tols <- process_tols(treat ~ age + educ + race + married + nodegree +                        re74 + re75, data = lalonde,                      tols = .02) tols ## - tols: ##      age     educ     race  married nodegree     re74     re75  ##     0.02     0.02     0.02     0.02     0.02     0.02     0.02 tols[\"race\"] <- .07  tols ## - tols: ##      age     educ     race  married nodegree     re74     re75  ##     0.02     0.02     0.07     0.02     0.02     0.02     0.02 ow3 <- optweight(treat ~ age + educ + race + married + nodegree +                    re74 + re75, data = lalonde,                  estimand = \"ATT\",                  tols = tols)  cobalt::bal.tab(ow3) ## Balance Measures ##                Type Diff.Adj ## age         Contin.     0.02 ## educ        Contin.     0.02 ## race_black   Binary     0.07 ## race_hispan  Binary     0.00 ## race_white   Binary    -0.07 ## married      Binary    -0.02 ## nodegree     Binary     0.02 ## re74        Contin.    -0.02 ## re75        Contin.     0.02 ##  ## Effective sample sizes ##            Control Treated ## Unadjusted   429.      185 ## Adjusted     132.7     185"},{"path":"https://ngreifer.github.io/optweight/articles/optweight.html","id":"norm","dir":"Articles","previous_headings":"Using optweight","what":"norm","title":"Using optweight to Estimate Stable Balancing Weights","text":"norm argument controls objective function used. allowable arguments \"l2\" L2 norm (default), \"l1\" L1 norm, \"linf\" L\\(\\infty\\) norm, \"entropy\" relative entropy, \"log\" sum negative logs. thorough theoretical work done L2 norm relative entropy, tend easiest optimize. Weighting minimizing relative entropy also known “entropy balancing” (Hainmueller 2012; Källberg Waernbaum 2023; Zhao Percival 2017) available WeightIt, uses parsimonious representation problem. Weighting minimizing sum negative logs equivalent nonparametric covariate balancing propensity score (npCBPS) weighting (Fong, Hazlett, Imai 2018), maximizes empirical likelihood data estimate weights. penalized version npCBPS available CBPS WeightIt (calls functions CBPS), optweight offers additional options possible packages, specifying balance tolerances, targets, different estimands. Different solvers available norm; see ?optweight.fit() details. , ’ll minimize L2 norm, L1 norm, L\\(\\infty\\) norm, relative entropy see choices affect properties weights. can see minimizing L2 norm yields weights lowest L2 divergence, minimizing L1 norm yields weights lowest L1 divergence, minimizing L\\(\\infty\\) norm yields weights lowest L\\(\\infty\\) divergence, minimizing relative entropy yields weights lowest relative entropy. L2 divergence closest correspondence ESS (1:1 relationship), theoretical reasons prefer norms, especially correspond certain assumptions true propensity score model. See Källberg Waernbaum (2023) information assumptions.","code":"# L2 norm ow_l2 <- optweight(treat ~ age + educ + race + married + nodegree +                      re74 + re75, data = lalonde,                    estimand = \"ATT\",                    norm = \"l2\")  summary(ow_l2, weight.range = FALSE) ## Summary of weights: ##  ##            L2    L1    L∞ Rel Ent # Zeros ## treated 0.    0.    0.       0.         0 ## control 1.717 1.339 5.002    1.23       0 ##  ## - Effective Sample Sizes: ##            Control Treated ## Unweighted   429.      185 ## Weighted     108.6     185 # L1 norm ow_l1 <- optweight(treat ~ age + educ + race + married + nodegree +                      re74 + re75, data = lalonde,                    estimand = \"ATT\",                    norm = \"l1\")  summary(ow_l1, weight.range = FALSE) ## Summary of weights: ##  ##            L2    L1    L∞ Rel Ent # Zeros ## treated 0.    0.     0.     0.          0 ## control 2.082 1.281 10.83   1.239       0 ##  ## - Effective Sample Sizes: ##            Control Treated ## Unweighted  429.       185 ## Weighted     80.42     185 # L-infinity norm ow_linf <- optweight(treat ~ age + educ + race + married + nodegree +                      re74 + re75, data = lalonde,                    estimand = \"ATT\",                    norm = \"linf\",                    eps = 1e-5) # to improve convergence  summary(ow_linf, weight.range = FALSE) ## Summary of weights: ##  ##            L2    L1    L∞ Rel Ent # Zeros ## treated 0.    0.    0.        0.        0 ## control 1.877 1.548 3.577     1.5       0 ##  ## - Effective Sample Sizes: ##            Control Treated ## Unweighted  429.       185 ## Weighted     94.83     185 # Relative entropy ow_re <- optweight(treat ~ age + educ + race + married + nodegree +                      re74 + re75, data = lalonde,                    estimand = \"ATT\",                    norm = \"entropy\")  summary(ow_re, weight.range = FALSE) ## Summary of weights: ##  ##            L2    L1   L∞ Rel Ent # Zeros ## treated 0.    0.    0.     0.          0 ## control 1.832 1.287 8.42   1.101       0 ##  ## - Effective Sample Sizes: ##            Control Treated ## Unweighted  429.       185 ## Weighted     98.46     185"},{"path":"https://ngreifer.github.io/optweight/articles/optweight.html","id":"estimand-and-targets","dir":"Articles","previous_headings":"Using optweight","what":"estimand and targets","title":"Using optweight to Estimate Stable Balancing Weights","text":"Different estimands can targeted supplying argument estimand. Allowable estimands include ATE, ATT, ATC. ensure covariate means group resemble full sample, treated group, control group, respectively. example, set estimand = \"ATE\", groups weighted covariate means equal covariate means full sample, demonstrated . covariate means full sample can computed using cobalt::col_w_mean(): estimating weights target ATE, see weighted covariate means group equal full sample: addition targeting natural sample, ’s also possible target specific population supplying argument targets1. theory behind methodology described Chattopadhyay, Cohn, Zubizarreta (2024). request different target population, process_targets() can used create vector target means supplied targets argument optweight(). default, process_targets() computes mean covariate full sample. can modified similarly tols specify target means. Note categorical covariates, proportions groups must sum 1. can supply optweight() request covariate means weighted sample equal target means. need set estimand = NULL ensure targets obeyed. Failing produce warning. treatment effect estimate method weighting interpretation estimate population similar means sample mean age 35 years (older original sample) racial profile 50% Black, 30% Hispanic, 20% white. Note process_targets() can supplied without formula targets specified variables data. ’ll use syntax section optweight.svy() .","code":"covs <- lalonde[-c(1, 9)]  cobalt::col_w_mean(covs) ##         age        educ  race_black race_hispan  race_white     married    nodegree        re74  ##     27.3632     10.2687      0.3958      0.1173      0.4870      0.4153      0.6303   4557.5466  ##        re75  ##   2184.9382 ow_ate <- optweight(treat ~ age + educ + race + married + nodegree +                       re74 + re75, data = lalonde,                     estimand = \"ATE\")  cobalt::col_w_mean(covs, weights = ow_ate$weights,                    subset = lalonde$treat == 1) ##         age        educ  race_black race_hispan  race_white     married    nodegree        re74  ##     27.3632     10.2687      0.3958      0.1173      0.4870      0.4153      0.6303   4557.5466  ##        re75  ##   2184.9382 cobalt::col_w_mean(covs, weights = ow_ate$weights,                    subset = lalonde$treat == 0) ##         age        educ  race_black race_hispan  race_white     married    nodegree        re74  ##     27.3632     10.2687      0.3958      0.1173      0.4870      0.4153      0.6303   4557.5466  ##        re75  ##   2184.9382 targets <- process_targets(~ age + educ + race + married + nodegree +                              re74 + re75,                            data = lalonde)  targets ## - targets: ##         age        educ  race_black race_hispan  race_white     married    nodegree        re74  ##     27.3632     10.2687      0.3958      0.1173      0.4870      0.4153      0.6303   4557.5466  ##        re75  ##   2184.9382 targets[\"age\"] <- 35 targets[c(\"race_black\", \"race_hispan\", \"race_white\")] <- c(.5, .3, .2)  targets ## - targets: ##         age        educ  race_black race_hispan  race_white     married    nodegree        re74  ##     35.0000     10.2687      0.5000      0.3000      0.2000      0.4153      0.6303   4557.5466  ##        re75  ##   2184.9382 ow_target <- optweight(treat ~ age + educ + race + married + nodegree +                          re74 + re75, data = lalonde,                        targets = targets,                        estimand = NULL)  # Weighted covariate means in the two groups cobalt::col_w_mean(covs, weights = ow_target$weights,                    subset = lalonde$treat == 1) ##         age        educ  race_black race_hispan  race_white     married    nodegree        re74  ##     35.0000     10.2687      0.5000      0.3000      0.2000      0.4153      0.6303   4557.5466  ##        re75  ##   2184.9382 cobalt::col_w_mean(covs, weights = ow_target$weights,                    subset = lalonde$treat == 0) ##         age        educ  race_black race_hispan  race_white     married    nodegree        re74  ##     35.0000     10.2687      0.5000      0.3000      0.2000      0.4153      0.6303   4557.5466  ##        re75  ##   2184.9382"},{"path":"https://ngreifer.github.io/optweight/articles/optweight.html","id":"sampling-weights-and-base-weights","dir":"Articles","previous_headings":"Using optweight","what":"Sampling weights and base weights","title":"Using optweight to Estimate Stable Balancing Weights","text":"Sampling weights used attempting generalize estimates sample specific target population. datasets come sampling weights order analyses using valid. weights can supplied s.weights argument optweight(). three effects: 1) balance target constraints correspond product estimated sampling weights, 2) target values covariates weighted sampling weights (supplied targets), 3) contribution estimated weights objective function weighted sampling weights. Sampling weights also used bootstrapping using fractional weighted bootstrap (Xu et al. 2020), e.g., implemented fwb package; see section “Estimating effects” . default, s.weights specified, sampling weights equal 1. Base weights set initial weights properties user wants retain enforcing balance constraints. estimated weights chosen minimize distance base weights, distance corresponds \\(f\\). weights can supplied b.weights argument optweight(). default, specified, base weights equal 1. example use base weights enforce balance set IPW weights estimated using flexible model unable exactly balance covariates. strategy used one winning methods 2016 ACIC data competition (Dorie et al. 2019). ’ll demonstrate use base weights . First, ’ll estimate propensity score weights using generalized boosted modeling WeightIt. flexible machine learning model, can request features beyond covariate means balanced minimizing largest Kolmogorov-Smirnov (KS) statistic weighted sample. Next ’ll use optweight() estimate set weights differ little possible (measured root mean squared divergence) estimated weights enforcing exact balance covariate means. ’ll also estimate SBW weights uniform base weights see difference properties weights. Finally, can look balance three sets weights means KS statistics. Looking mean differences (columns Diff.weightit, Diff.ow_bw, Diff.ow first stable), can see GBM weights WeightIt alone balance covariate means, whereas set SBW weights optweight . However, second table, can see big differences KS statistics SBW weights incorporated base weights didn’t. KS statistics SBW weights incorporated base weights (listed KS.ow_bw column) close GBM weights (listed KS.weightit column) estimated weights close GBM weights. contrast, SBW weights didn’t incorporate base weights high KS statistics covariates (listed KS.ow column); unable take advantage distribution-balancing properties original GBM weights. way, incorporating base weights provides middle ground GBM weights basic SBW weights: ensure exact balance means attempting retain much similarity GBM weights possible, thereby inheriting balancing properties. Unfortunately, one properties also low ESS, though case, little ESS lost enforcing additional balance constraints. Using different norms base weights can also effective using uniform base weights, different norms prioritize similarity base weights ways may retain different properties2.","code":"W_gbm <- WeightIt::weightit(treat ~ age + educ + race + married + nodegree +                               re74 + re75, data = lalonde,                             estimand = \"ATT\",                             method = \"gbm\",                             criterion = \"ks.max\") ow_bw <- optweight(treat ~ age + educ + race + married + nodegree +                      re74 + re75, data = lalonde,                    estimand = \"ATT\",                    b.weights = W_gbm$weights) ow <- optweight(treat ~ age + educ + race + married + nodegree +                   re74 + re75, data = lalonde,                 estimand = \"ATT\") # Mean diferences cobalt::bal.tab(W_gbm, stats = \"m\",                 weights = list(ow_bw = ow_bw$weights,                                ow = ow$weights)) ## Balance Measures ##                 Type Diff.weightit Diff.ow_bw Diff.ow ## prop.score  Distance         0.395      0.382    1.13 ## age          Contin.        -0.033      0.000   -0.00 ## educ         Contin.        -0.061      0.000   -0.00 ## race_black    Binary         0.013      0.000   -0.00 ## race_hispan   Binary         0.006     -0.000    0.00 ## race_white    Binary        -0.019     -0.000    0.00 ## married       Binary        -0.022      0.000   -0.00 ## nodegree      Binary         0.086      0.000   -0.00 ## re74         Contin.         0.037      0.000   -0.00 ## re75         Contin.         0.069      0.000   -0.00 ##  ## Effective sample sizes ##          Control Treated ## All       429.       185 ## weightit   32.07     185 ## ow_bw      31.62     185 ## ow        108.64     185 # KS statistics cobalt::bal.tab(W_gbm, stats = \"ks\",                 weights = list(ow_bw = ow_bw$weights,                                ow = ow$weights)) ## Balance Measures ##                 Type KS.weightit KS.ow_bw KS.ow ## prop.score  Distance       0.189    0.183 0.488 ## age          Contin.       0.086    0.118 0.283 ## educ         Contin.       0.086    0.055 0.042 ## race_black    Binary       0.013    0.000 0.000 ## race_hispan   Binary       0.006    0.000 0.000 ## race_white    Binary       0.019    0.000 0.000 ## married       Binary       0.022    0.000 0.000 ## nodegree      Binary       0.086    0.000 0.000 ## re74         Contin.       0.045    0.041 0.226 ## re75         Contin.       0.072    0.051 0.140 ##  ## Effective sample sizes ##          Control Treated ## All       429.       185 ## weightit   32.07     185 ## ow_bw      31.62     185 ## ow        108.64     185"},{"path":"https://ngreifer.github.io/optweight/articles/optweight.html","id":"dual-variables","dir":"Articles","previous_headings":"Using optweight","what":"Dual variables","title":"Using optweight to Estimate Stable Balancing Weights","text":"Dual variables, also known “shadow prices”, part output optimization problem represent “active” given constraint optimum (Zubizarreta 2015). large dual variable means relaxing constraint allow objective function reach lower value. related coefficients covariates propensity score model, representing much covariate contributing estimation weights. Zubizarreta (2015) describes utility dual variables SBW: can used determine covariates can constraints relaxed improve precision covariates can constraints tightened without affecting precision. dual variables available optweight() output duals component, can also plotted using plot(). can also useful diagnosing convergence failure; often, constraint impossible meet high dual variable solution can found. , ’ll demonstrate can use dual variables see modify constraints try take advantage bias-variance trade-. First ’ll estimate SBW weights tolerances .02 covariates. can print dual variables duals component output object plot plot():  , ’s clear race largest dual variable, re75 smallest. means can likely get biggest gains ESS relaxing constraint race, whereas tightening constraint re75 little effect ESS. , relax balance constraint race .1. relaxing constraint race, ESS increased quite bit. see increase instead relaxed constraint covariate smaller dual variable, like re75. , restore balance constraints .02 set balance constraint re75 .1. virtually effect ESS (relative balance tolerances equal .02). However, also suggests can tighten constraint re75 without much loss ESS. , decrease tolerance re75 0: see despite tighter tolerance, ESS remains . reference, balance statistics ESSs four sets weights: can see relaxing balance constraint race increases ESS significantly, whereas either tightening relaxing constraint re75 little effect ESS.","code":"tols <- process_tols(treat ~ age + educ + race + married + nodegree +                        re74 + re75, data = lalonde,                      tols = .02)  ow <- optweight(treat ~ age + educ + race + married + nodegree +                   re74 + re75, data = lalonde,                 estimand = \"ATT\",                 tols = tols)  summary(ow, weight.range = FALSE) ## Summary of weights: ##  ##            L2    L1    L∞ Rel Ent # Zeros ## treated 0.    0.    0.      0.          0 ## control 1.616 1.267 4.212   1.118       0 ##  ## - Effective Sample Sizes: ##            Control Treated ## Unweighted   429.      185 ## Weighted     118.8     185 ow$duals ##   constraint      cov    dual ## 1     target      age 0.24485 ## 2     target     educ 0.62674 ## 3     target     race 5.66548 ## 4     target  married 1.05266 ## 5     target nodegree 1.61135 ## 6     target     re74 0.71501 ## 7     target     re75 0.04373 plot(ow) tols[\"race\"] <- .1  ow2 <- optweight(treat ~ age + educ + race + married + nodegree +                    re74 + re75, data = lalonde,                  estimand = \"ATT\",                  tols = tols)  summary(ow2, weight.range = FALSE) ## Summary of weights: ##  ##            L2    L1    L∞ Rel Ent # Zeros ## treated 0.    0.    0.       0.         0 ## control 1.424 1.113 3.638    0.91       0 ##  ## - Effective Sample Sizes: ##            Control Treated ## Unweighted   429.      185 ## Weighted     141.7     185 tols[] <- .02 tols[\"re75\"] <- .1  ow3 <- optweight(treat ~ age + educ + race + married + nodegree +                    re74 + re75, data = lalonde,                  estimand = \"ATT\",                  tols = tols)  summary(ow3, weight.range = FALSE) ## Summary of weights: ##  ##            L2    L1    L∞ Rel Ent # Zeros ## treated 0.    0.    0.      0.          0 ## control 1.616 1.267 4.207   1.118       0 ##  ## - Effective Sample Sizes: ##            Control Treated ## Unweighted   429.      185 ## Weighted     118.8     185 tols[\"re75\"] <- 0  ow4 <- optweight(treat ~ age + educ + race + married + nodegree +                    re74 + re75, data = lalonde,                  estimand = \"ATT\",                  tols = tols)  summary(ow4, weight.range = FALSE) ## Summary of weights: ##  ##            L2    L1    L∞ Rel Ent # Zeros ## treated 0.    0.    0.       0.         0 ## control 1.617 1.269 4.229    1.12       0 ##  ## - Effective Sample Sizes: ##            Control Treated ## Unweighted   429.      185 ## Weighted     118.7     185 cobalt::bal.tab(treat ~ age + educ + race + married + nodegree +                   re74 + re75, data = lalonde,                 weights = list(ow  = ow$weights,                                ow2 = ow2$weights,                                ow3 = ow3$weights,                                ow4 = ow4$weights)) ## Balance Measures ##                Type Diff.ow Diff.ow2 Diff.ow3 Diff.ow4 ## age         Contin.    0.02     0.02    0.020     0.02 ## educ        Contin.    0.02     0.02    0.020     0.02 ## race_black   Binary    0.02     0.10    0.020     0.02 ## race_hispan  Binary    0.00     0.00    0.000     0.00 ## race_white   Binary   -0.02    -0.10   -0.020    -0.02 ## married      Binary   -0.02    -0.02   -0.020    -0.02 ## nodegree     Binary    0.02     0.02    0.020     0.02 ## re74        Contin.   -0.02    -0.02   -0.020    -0.02 ## re75        Contin.    0.02     0.02    0.026    -0.00 ##  ## Effective sample sizes ##     Control Treated ## All   429.      185 ## ow    118.8     185 ## ow2   141.7     185 ## ow3   118.8     185 ## ow4   118.7     185"},{"path":"https://ngreifer.github.io/optweight/articles/optweight.html","id":"multivariate-treatments","dir":"Articles","previous_headings":"Using optweight","what":"Multivariate treatments","title":"Using optweight to Estimate Stable Balancing Weights","text":"possible supply balance constraints multiple (.e., multivariate) treatments simultaneously estimate single set weights satisfies . approach described Chen Zhou (2023) context multiple continuous treatments. optweightMV() provides interface balancing multiple treatments works similarly optweight(), though ability supply multiple balancing formulas. Though can used conceptually distinct treatments, can also sometimes useful use multiple transformations single treatment; example, Greifer (2020) found order eliminate bias due certain kinds imbalance continuous treatment, square centered treatment must uncorrelated covariates, addition treatment uncorrelated covariates. use optweightMV(), supply list balancing formulas formula.list argument. tols.list argument must also list vector tolerances treatment, value covariate. However, targets vector value unique covariate since one specify multiple targets covariate. example (run) specify call optweightMV(): syntax can abbreviated supplying single value element tols.list applied covariates, e.g., tols.list = list(.01, .02, .03); , vector balance tolerance desired covariates treatments, list single vector, e.g., tols.list = list(c(x1 = .01, x2 = .01, x3 = .01)); , tolerance desired covariates treatments, list single value, e.g., tols.list = list(.02). targets can omitted target ATE (.e., balance covariates means sample), estimands can specified. One might tempted use optweightMV() estimate balancing weights longitudinal treatments. possible, ’s simple supplying balancing formula treatment balancing treatment covariate history treatment (Yiu Su 2020). Zhou Wodtke (2020) describe specify balance constraints entropy balancing longitudinal treatments, involve balancing covariate directly rather residuals regressions covariates treatment covariate histories. Functionality specific method present optweight, available rbw package. may possible implement optweight manually, advise .","code":"owmv <- optweightMV(list(t1 ~ x1 + x2 + x3,                          t2 ~ x1 + x2 + x3,                          t3 ~ x1 + x2 + x3),                     data = data,                     tols.list = list(c(x1 = .01, x2 = .01, x3 = .01),                                      c(x1 = .02, x2 = .02, x3 = .02),                                      c(x1 = .03, x2 = .03, x3 = .03)),                     targets = c(x1 = 10, x2 = .34, x3 = 5.5))"},{"path":"https://ngreifer.github.io/optweight/articles/optweight.html","id":"optweight-svy","dir":"Articles","previous_headings":"Using optweight","what":"optweight.svy()","title":"Using optweight to Estimate Stable Balancing Weights","text":"goal balance treatment groups target population rather balance one sample target distribution, one can use optweight.svy() instead optweight(). .svy suffix indication can used method generate survey weights sample generalizes population interest specific means. optweight.svy() works just like optweight() except treatment variable specified targets specified. useful context matching-adjusted indirect comparison [MAIC; Signorovitch et al. (2010)], involves weighting given trial sample resemble covariate distribution trial’s sample. MAIC originally described equivalent entropy balancing (Phillippo et al. 2020), can requested setting norm = \"entropy\". , demonstrate weighting control subset lalonde resemble specific target population. optweightit(), can helpful use process_targets() simplify specification covariates means. variables dataset specified, formula can omitted (process_targets() optweight.svy()). request individual means, targets can set values. allow covariate mean vary freely, one can either omit calls process_targets() optweight.svy() set target value NA. ’ll re78, set specific targets variables except re75, ’ll leave mean. can supply optweight.svy(). time ’ll set min.w 0 allow weights 0 effectively dropped sample. can see weights required move sample toward specified target decrease ESS quite bit, several units given weights 0. can actually good thing means less data needs collected since weights 0 necessary subsequent analysis. can examine weighted covariate means using cobalt::col_w_means() , estimated weights supplied s.weights: can see weighted mean re78 whatever minimized L2 norm weights since constraint placed . optweight(), can see much constraint contributed increase variability examining dual variables:  ’s clear constraint re74 contributing , relaxing constraint greatest impact ESS. constraint can relaxed either changing target one closer original data (closer constraint placed re74) setting relaxed tolerance re74 using tols. ’ll use latter option : set tolerance re74 300. need set std.cont = FALSE tell optweight.svy() tolerance continuous variables raw units, standardized units. Now can interpret constraint allowing weighted mean re74 within 300 specified target 1000. increased ESS weights, can see weighted mean re74 300 away 1000, variables specified targets.","code":"lalonde_c <- subset(lalonde, treat == 0,                     select = -c(treat))  targets <- process_targets(lalonde_c)  targets ## - targets: ##         age        educ  race_black race_hispan  race_white     married    nodegree        re74  ##     28.0303     10.2354      0.2028      0.1422      0.6550      0.5128      0.5967   5619.2365  ##        re75        re78  ##   2466.4844   6984.1697 targets[\"age\"] <- 40 targets[\"educ\"] <- 9 targets[c(\"race_black\", \"race_hispan\", \"race_white\")] <- c(.2, .2, .6) targets[\"married\"] <- .6 targets[\"nodegree\"] <- .6 targets[\"re74\"] <- 1000 is.na(targets[\"re78\"]) <- TRUE  targets ## - targets: ##         age        educ  race_black race_hispan  race_white     married    nodegree        re74  ##        40.0         9.0         0.2         0.2         0.6         0.6         0.6      1000.0  ##        re75        re78  ##      2466.5          NA ow_s <- optweight.svy(lalonde_c,                       targets = targets,                       min.w = 0)  ow_s ## An optweight.svy object ##  - number of obs.: 429 ##  - norm minimized: \"l2\" ##  - sampling weights: present ##  - base weights: present ##  - covariates: age, educ, race, married, nodegree, re74, re75, re78 summary(ow_s) ## Summary of weights: ##  ## - Weight ranges: ##     Min                                 Max ## all   0 |---------------------------| 13.54 ##  ## - Units with 5 greatest weights by group: ##                                           ##         404   152     111      19      16 ##  all 9.4881 9.669 11.3265 11.4289 13.5373 ##  ##        L2  L1    L∞ # Zeros ## all 2.237 1.5 12.54     307 ##  ## - Effective Sample Sizes: ##             Total ## Unweighted 429.   ## Weighted    71.44 cobalt::col_w_mean(lalonde_c, s.weights = ow_s$weights) ##         age        educ  race_black race_hispan  race_white     married    nodegree        re74  ##        40.0         9.0         0.2         0.2         0.6         0.6         0.6      1000.0  ##        re75        re78  ##      2466.5      4725.6 plot(ow_s) tols <- process_tols(lalonde_c, tols = 0)  tols[\"re74\"] <- 300  tols ## - tols: ##      age     educ     race  married nodegree     re74     re75     re78  ##        0        0        0        0        0      300        0        0 ow_s2 <- optweight.svy(lalonde_c,                        targets = targets,                        min.w = 0,                        tols = tols,                        std.cont = FALSE)  summary(ow_s2, weight.range = FALSE) ## Summary of weights: ##  ##       L2   L1    L∞ # Zeros ## all 2.07 1.44 10.68     290 ##  ## - Effective Sample Sizes: ##             Total ## Unweighted 429.   ## Weighted    81.15 cobalt::col_w_mean(lalonde_c, s.weights = ow_s2$weights) ##         age        educ  race_black race_hispan  race_white     married    nodegree        re74  ##        40.0         9.0         0.2         0.2         0.6         0.6         0.6      1300.0  ##        re75        re78  ##      2466.5      4710.8"},{"path":"https://ngreifer.github.io/optweight/articles/optweight.html","id":"estimating-effects","dir":"Articles","previous_headings":"","what":"Estimating effects","title":"Using optweight to Estimate Stable Balancing Weights","text":"SBW weights function just like IPW weights, procedures can used estimate effect treatment SBW-weighted sample. One needs run regression outcome treatment weights incorporated. critical usual standard errors lm() glm(), etc., used; special standard errors required weighting. See vignette(\"estimating-effects\", package = \"WeightIt\") details estimating effects weighting. WeightIt provides tools facilitating weights estimated using WeightIt::weightit(), provides interface optweight(), though slightly fewer options available. Often, best way account uncertainty estimating treatment effect SBW bootstrapping. ensures variability due estimating weights correctly incorporated. fractional weighted bootstrap (Xu et al. 2020) often particularly effective units dropped sample bootstrap replication. bootstrapping used (e.g., computationally demanding specified constraints expected satisfied bootstrap samples), using robust standard error can acceptable alternative. , demonstrate approaches lalonde data. First, estimate weights ATT fit outcome model. , must use usual standard errors produced running summary() lm() output; must use either bootstrapping robust standard error. First, ’ll use bootstrapping fwb, implements fractional weighted bootstrap. involves drawing set weights distribution performing entire analysis weights incorporated. weights supplied s.weights argument optweight() multiplied returned weights used lm()3. can use update() re-estimate SBW weights weighted regression model bootstrap replication. use robust standard error, ’s easiest use functions marginaleffects package. Supply output lm() marginaleffects::avg_comparisons() vcov = \"HC3\" request robust standard error treatment effect estimate. Robust standard errors treat weights fixed, often yields larger standard errors bootstrap.","code":"ow <- optweight(treat ~ age + educ + race + married + nodegree +                   re74 + re75, data = lalonde,                 estimand = \"ATT\",                 eps = 1e-5)  fit <- lm(re78 ~ treat, data = lalonde,           weights = ow$weights)  coef(fit) ## (Intercept)       treat  ##        5145        1204 library(fwb)  bootfun <- function(data, w) {   ow_boot <- update(ow, s.weights = w)   fit_boot <- update(fit, weights = ow_boot$weights * w)      coef(fit_boot) }  set.seed(123)  boot <- fwb(lalonde, bootfun,             R = 250, # more is always better, but slower             verbose = FALSE)  summary(boot, ci.type = \"wald\", p.value = TRUE) ##             Estimate Std. Error CI 2.5 % CI 97.5 % z value Pr(>|z|)     ## (Intercept)     5145        570     4028      6261    9.03   <2e-16 *** ## treat           1204        772     -310      2718    1.56     0.12     ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 library(marginaleffects)  avg_comparisons(fit,                 variables = \"treat\",                 vcov = \"HC3\",                 newdata = subset(treat == 1)) ##  ##  Estimate Std. Error    z Pr(>|z|)   S 2.5 % 97.5 % ##      1204        824 1.46    0.144 2.8  -411   2819 ##  ## Term: treat ## Type: response ## Comparison: 1 - 0"},{"path":[]},{"path":"https://ngreifer.github.io/optweight/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Noah Greifer. Author, maintainer.","code":""},{"path":"https://ngreifer.github.io/optweight/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Greifer N (2025). optweight: Optimization-Based Stable Balancing Weights. R package version 1.0.0, https://ngreifer.github.io/optweight/.","code":"@Manual{,   title = {optweight: Optimization-Based Stable Balancing Weights},   author = {Noah Greifer},   year = {2025},   note = {R package version 1.0.0},   url = {https://ngreifer.github.io/optweight/}, }"},{"path":"https://ngreifer.github.io/optweight/index.html","id":"optweight-optimization-based-stable-balancing-weights-","dir":"","previous_headings":"","what":"Optimization-Based Stable Balancing Weights","title":"Optimization-Based Stable Balancing Weights","text":"optweight contains functions estimate stable balancing weights balance covariates given thresholds. solves convex optimization problem minimize function weights captures variability (divergence set base weights). method described Zubizarreta (2015), Källberg Waernbaum (2023), Wang Zubizarreta (2020). optweight extends method multi-category, continuous, multivariate treatments provides simple user interface compatibility cobalt package balance assessment. See vignette(\"optweight\") thorough description package’s capabilities. install optweight, use code : example estimating weights optweight assessing balance covariates cobalt. can see standardized mean differences .01 absolute value, requested using tols argument. set min.w = 0, units received weights 0, effectively dropping sample (default, smallest weight allowed \\(10^{-8}\\)). can use plot() examine dual variables constraint, represent active constraint optimal point. Highly active constraints affect objective function value tolerances changed.  can see race highest dual variable; relaxing constraint race yield biggest improvement effective sample size, tightening constraint yield biggest decrease effective sample size. lower-level function optweight.fit() operates covariates treatment variables directly. optweightMV() supports multivariate (.e., multiple) treatments. addition estimating balancing weights estimating treatment effects, optweight can estimate sampling weights generalizing estimate new target population defined covariate moments using optweight.svy(). cite optweight, please use citation(\"optweight\") generate correct reference. sure include version package. Please submit bug reports, questions, comments, issues https://github.com/ngreifer/optweight/issues.","code":"#CRAN version install.packages(\"optweight\")  #Development version pak::pkg_install(\"ngreifer/optweight\") library(\"optweight\") library(\"cobalt\")  data(\"lalonde\")  # Estimate weights ow <- optweight(treat ~ age + educ + race + nodegree + married +                   re74 + re75,                 data = lalonde,                 estimand = \"ATT\",                 tols = .01,                 min.w = 0) ow #> An optweight object #>  - number of obs.: 614 #>  - norm minimized: \"l2\" #>  - sampling weights: present #>  - base weights: present #>  - treatment: 2-category #>  - estimand: ATT (focal: 1) #>  - covariates: age, educ, race, nodegree, married, re74, re75 # Information about the weights summary(ow) #> Summary of weights: #>  #> - Weight ranges: #>         Min                                  Max #> treated   1      ||                       1.     #> control   0 |---------------------------| 5.5885 #>  #> - Units with 5 greatest weights by group: #>                                             #>               1      2      3      4      5 #>  treated      1      1      1      1      1 #>             423    388    226    196    118 #>  control 5.2698 5.2985 5.3241 5.4795 5.5885 #>  #>            L2    L1    L∞ # Zeros #> treated 0.    0.    0.          0 #> control 1.663 1.302 4.588     231 #>  #> - Effective Sample Sizes: #>            Control Treated #> Unweighted   429.      185 #> Weighted     113.9     185 # Covariate balance bal.tab(ow) #> Balance Measures #>                Type Diff.Adj #> age         Contin.     0.01 #> educ        Contin.     0.01 #> race_black   Binary     0.01 #> race_hispan  Binary     0.00 #> race_white   Binary    -0.01 #> nodegree     Binary     0.01 #> married      Binary    -0.01 #> re74        Contin.    -0.01 #> re75        Contin.     0.01 #>  #> Effective sample sizes #>            Control Treated #> Unadjusted   429.      185 #> Adjusted     113.9     185 plot(ow)"},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/optweight-package.html","id":null,"dir":"Reference","previous_headings":"","what":"optweight: Optimization-Based Stable Balancing Weights — optweight-package","title":"optweight: Optimization-Based Stable Balancing Weights — optweight-package","text":"Use optimization estimate weights balance covariates binary, multi-category, continuous, multivariate treatments spirit Zubizarreta (2015) doi:10.1080/01621459.2015.1023805 . degree balance can specified covariate. addition, sampling weights can estimated allow sample generalize population specified given target moments covariates.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/optweight-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"optweight: Optimization-Based Stable Balancing Weights — optweight-package","text":"Maintainer: Noah Greifer noah.greifer@gmail.com (ORCID)","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting Function for Stable Balancing Weights — optweight.fit","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"optweight.fit() optweightMV.fit() perform optimization optweight() optweightMV() , cases, used directly. Little processing inputs performed, must given exactly described .","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"","code":"optweight.fit(   covs,   treat,   tols = 0,   estimand = \"ATE\",   targets = NULL,   s.weights = NULL,   b.weights = NULL,   focal = NULL,   norm = \"l2\",   std.binary = FALSE,   std.cont = TRUE,   min.w = 1e-08,   verbose = FALSE,   solver = NULL,   ... )  optweightMV.fit(   covs.list,   treat.list,   tols.list = list(0),   estimand = \"ATE\",   targets = NULL,   s.weights = NULL,   b.weights = NULL,   norm = \"l2\",   std.binary = FALSE,   std.cont = TRUE,   min.w = 1e-08,   verbose = FALSE,   solver = NULL,   ... )"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"covs numeric matrix covariates balanced. treat vector treatment statuses. Non-numeric (.e., factor character) vectors allowed. tols vector balance tolerance values covariate. Default 0. estimand desired estimand, determines target population. binary treatments, can \"ATE\", \"ATT\", \"ATC\", NULL. multi-category treatments, can \"ATE\", \"ATT\", NULL. continuous treatments, can \"ATE\" NULL. default \"ATE\". optweightMV.fit(), \"ATE\" NULL supported. estimand ignored targets non-NULL. estimand targets NULL, targeting take place. targets optional vector target population mean values baseline covariate. resulting weights yield sample means within tols/2 units target values covariate. NULL NA, estimand used determine targets. Otherwise, estimand ignored. target values NA, corresponding variable targeted weighted mean wherever weights yield smallest variance. s.weights optional vector sampling weights. Default vector 1s. b.weights optional vector base weights. Default vector 1s. focal multi-categorical treatments used estimand = \"ATT\", group consider \"treated\" focal group. group weighted, groups weighted resemble focal group. norm character; string containing name norm corresponding objective function minimize. Allowable options include \"l1\" L1 norm, \"l2\" L2 norm (default), \"linf\" L\\(\\infty\\) norm, \"entropy\" negative entropy, \"log\" sum negative logs. See Details. std.binary, std.cont logical; whether tolerances standardized mean units (TRUE) raw units (FALSE) binary variables continuous variables, respectively. default FALSE std.binary raw proportion differences make sense standardized mean difference binary variables. arguments analogous binary continuous arguments bal.tab() cobalt. min.w numeric; single value less 1 smallest allowable weight. analyses require nonzero weights units, small, nonzero minimum may desirable. default 1e-8 (\\(10^{-8}\\)), materially change properties weights minimum 0 prevents warnings packages use weights estimate treatment effects. norm \"entropy\" \"log\" min.w <= 0, min.w set smallest nonzero value. verbose logical; whether information optimization problem solution printed. Default FALSE. solver string; name optimization solver use. Allowable options depend norm. Default use whichever eligible solver installed, , default solver corresponding norm. See Details information. ... Options passed settings function corresponding solver. covs.list list containing one numeric matrix covariates balanced treatment. treat.list list containing one vector treatment statuses treatment. tols.list list balance tolerance vectors, one treatment, value covariate.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"optweight.fit optweightMV.fit object following elements: w estimated weights, one unit. duals data.frame containing dual variables covariate (optweight.fit()), list thereof (optweightMV.fit()). See vignette(\"optweight\") interpretation values. info list containing information performance optimization termination.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"optweight.fit() optweightMV.fit() transform inputs required inputs optimization functions, (sparse) matrices vectors, supplies outputs (weights, dual variables, convergence information) back optweight() optweightMV(). Little processing inputs performed, normally handled optweight() optweightMV(). Target balance constraints applied product estimated weights sampling weights. addition, sum product estimated weights sampling weights constrained equal sum product base weights sampling weights. binary multi-category treatments, constraints apply within treatment group.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"norm","dir":"Reference","previous_headings":"","what":"norm","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"objective function optimization problem \\(f\\left(w_i, b_i, s_i\\right)\\), \\(w_i\\) estimated weight unit \\(\\), \\(s_i\\) sampling weight unit \\(\\) (supplied s.weights) \\(b_i\\) base weight unit \\(\\) (supplied b.weights). norm argument determines \\(f(.,.,.)\\), detailed : norm = \"l2\", \\(f\\left(w_i, b_i, s_i\\right) = \\frac{1}{n} \\sum_i {s_i(w_i - b_i)^2}\\) norm = \"l1\", \\(f\\left(w_i, b_i, s_i\\right) = \\frac{1}{n} \\sum_i {s_i \\vert w_i - b_i \\vert}\\) norm = \"linf\", \\(f\\left(w_i, b_i, s_i\\right) = \\max_i {\\vert w_i - b_i \\vert}\\) norm = \"entropy\", \\(f\\left(w_i, b_i, s_i\\right) = \\frac{1}{n} \\sum_i {s_i w_i \\log \\frac{w_i}{b_i}}\\) norm = \"log\", \\(f\\left(w_i, b_i, s_i\\right) = \\frac{1}{n} \\sum_i {-s_i \\log \\frac{w_i}{b_i}}\\) default, s.weights b.weights set 1 units unless supplied. b.weights must positive norm \"entropy\" \"log\", norm = \"linf\" used s.weights supplied. norm = \"l2\" s.weights b.weights NULL, weights estimated maximize effective sample size. norm = \"entropy\", estimated weights equivalent entropy balancing weights (Källberg & Waernbaum, 2023). norm = \"log\", b.weights ignored optimization, affect estimated weights.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"solver","dir":"Reference","previous_headings":"","what":"solver","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"solver argument controls optimization solver used. Different solvers compatible norm. See table allowable options, package require, function solving, function controls settings. Note \"lpsolve\" can used min.w nonnegative. default solver norm follows: package corresponding default solver installed package different eligible solver , used. Otherwise, asked install required package. osqp required optweight, default \"l1\" \"linf\" norms highs installed. default package one shown good performance given norm; generally, eligible solvers perform equally well terms accuracy differ time taken.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"solving-convergence-failure","dir":"Reference","previous_headings":"","what":"Solving Convergence Failure","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"Sometimes optimization fail converge solution. variety reasons might happen, include constraints nearly impossible satisfy optimization surface relatively flat. can hard know exact cause solve , section offers solutions one might try. Typically, solutions can found easily using \"l2\" norm; norms, especially \"linf\" \"l1\", likely see problems. Rarely problem iterations, though possible. problems can solved default 200,000 iterations, sometimes can help increase number max_iter argument. Usually, though, just ends taking time without solution found. problem constraints tight, can helpful loosen constraints. Sometimes examining dual variables solution failed converge can reveal constraints causing problem. Sometimes suboptimal solution possible; solution satisfy constraints exactly come pretty close. allow solutions, argument eps can increased larger values. Sometimes using different solver can improve performance. Using default solver norm, described , can reduce probability convergence failures.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"Chattopadhyay, ., Cohn, E. R., & Zubizarreta, J. R. (2024). One-Step Weighting Generalize Transport Treatment Effect Estimates Target Population. American Statistician, 78(3), 280–289. doi:10.1080/00031305.2023.2267598 Källberg, D., & Waernbaum, . (2023). Large Sample Properties Entropy Balancing Estimators Average Causal Effects. Econometrics Statistics. doi:10.1016/j.ecosta.2023.11.004 Wang, Y., & Zubizarreta, J. R. (2020). Minimal dispersion approximately balancing weights: Asymptotic properties practical considerations. Biometrika, 107(1), 93–105. doi:10.1093/biomet/asz050 Zubizarreta, J. R. (2015). Stable Weights Balance Covariates Estimation Incomplete Outcome Data. Journal American Statistical Association, 110(511), 910–922. doi:10.1080/01621459.2015.1023805","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  treat <- lalonde$treat covs <- splitfactor(lalonde[2:8], drop.first = \"if2\")  ow.fit <- optweight.fit(covs,                         treat,                         tols = .02,                         estimand = \"ATE\",                         norm = \"l2\")"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Stable Balancing Weights — optweight","title":"Estimate Stable Balancing Weights — optweight","text":"Estimate stable balancing weights treatments covariates specified formula. degree balance covariate specified tols target population can specified targets estimand. See Zubizarreta (2015) Wang & Zubizarreta (2019) details properties weights methods used fit .","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Stable Balancing Weights — optweight","text":"","code":"optweight(   formula,   data = NULL,   tols = 0,   estimand = \"ATE\",   targets = NULL,   s.weights = NULL,   b.weights = NULL,   focal = NULL,   norm = \"l2\",   verbose = FALSE,   ... )  optweightMV(   formula.list,   data = NULL,   tols.list = list(0),   estimand = \"ATE\",   targets = NULL,   s.weights = NULL,   b.weights = NULL,   focal = NULL,   norm = \"l2\",   verbose = FALSE,   ... )"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Stable Balancing Weights — optweight","text":"formula formula treatment variable left hand side covariates balanced right hand side, list thereof. See glm() details. Interactions functions covariates allowed. data optional data set form data frame contains variables formula. tols vector balance tolerance values covariate, list thereof. resulting weighted balance statistics least small values. one value supplied, applied covariates. Can also output call process_tols(). See Details. estimand desired estimand, determines target population. binary treatments, can \"ATE\", \"ATT\", \"ATC\", NULL. multi-category treatments, can \"ATE\", \"ATT\", NULL. continuous treatments, can \"ATE\" NULL. default \"ATE\". optweightMV(), \"ATE\" NULL supported. estimand ignored targets non-NULL. estimand targets NULL, targeting take place. See Details. targets vector target population mean values baseline covariate. resulting weights yield sample means within tols/2 units target values covariate. NULL NA, estimand used determine targets. Otherwise, estimand ignored. target values NA, corresponding variable targeted weighted mean wherever weights yield smallest variance. Can also output call process_targets(). See Details. s.weights vector sampling weights name variable data contains sampling weights. b.weights vector base weights name variable data contains base weights. supplied, desired norm distance estimated weights base weights minimized. focal multi-category treatments used estimand = \"ATT\", group consider \"treated\" focal group. group weighted, groups weighted like focal group. specified, estimand automatically set \"ATT\". norm character; string containing name norm corresponding objective function minimize. Allowable options include \"l1\" L1 norm, \"l2\" L2 norm (default), \"linf\" L\\(\\infty\\) norm, \"entropy\" negative entropy, \"log\" sum logs. See optweight.fit() details. verbose logical; whether information optimization problem solution printed. Default FALSE. ... Arguments passed optweight.fit, optweightMV.fit std.binary,std.cont logical; whether tolerances standardized mean units (TRUE) raw units (FALSE) binary variables continuous variables, respectively. default FALSE std.binary raw proportion differences make sense standardized mean difference binary variables. arguments analogous binary continuous arguments bal.tab() cobalt. min.w numeric; single value less 1 smallest allowable weight. analyses require nonzero weights units, small, nonzero minimum may desirable. default 1e-8 (\\(10^{-8}\\)), materially change properties weights minimum 0 prevents warnings packages use weights estimate treatment effects. norm \"entropy\" \"log\" min.w <= 0, min.w set smallest nonzero value. covs.list list containing one numeric matrix covariates balanced treatment. treat.list list containing one vector treatment statuses treatment. solver string; name optimization solver use. Allowable options depend norm. Default use whichever eligible solver installed, , default solver corresponding norm. See Details information. formula.list list formulas, treatment variable left hand side covariates balanced right hand side. tols.list list vectors balance tolerance values covariate treatment. resulting weighted balance statistics least small values. one value supplied, applied covariates. See Details.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Stable Balancing Weights — optweight","text":"optweight(), optweight object following elements: weights estimated weights, one unit. treat values treatment variable. covs covariates used fitting. includes raw covariates, may altered fitting process. s.weights provided sampling weights. b.weights provided base weights. estimand estimand requested. focal focal variable ATT requested multi-category treatment. call function call. tols tolerance values covariate. duals data.frame containing dual variables covariate. See Details interpretation values. info Information performance optimization termination. optweightMV(), optweightMV object following elements: weights estimated weights, one unit. treat.list list values treatment variables. covs.list list covariates treatment used fitting. includes raw covariates, may altered fitting process. s.weights provided sampling weights. b.weights provided base weights. call function call. tols list tolerance values covariate treatment. duals list data.frames containing dual variables covariate treatment. See Details interpretation values. info Information performance optimization termination.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Stable Balancing Weights — optweight","text":"optimization performed lower-level function optweight.fit() (optweight()) optweightMV.fit() (optweightMV()). binary multi-category treatments, weights estimated weighted mean differences covariates within given tolerance thresholds (unless std.binary std.cont TRUE, case standardized mean differences considered binary continuous variables, respectively). covariate \\(x\\) specified tolerance \\(\\delta\\), weighted means group within \\(\\delta\\) . Additionally, ATE specified estimand target population specified, weighted means group within \\(\\delta/2\\) target means; ensures generalizability population original sample drawn. standardized tolerance values requested, standardization factor corresponds estimand requested: ATE requested target population specified, standardization factor square root average variance covariate across treatment groups, ATT ATC requested, standardization factor standard deviation covariate focal group. standardization factor computed accounting s.weights. continuous treatments, weights estimated weighted correlation treatment covariate within specified tolerance threshold. ATE requested target population specified, means weighted covariates treatment restricted equal target population ensure generalizability desired target population. weighted correlation computed weighted covariance divided product unweighted standard deviations. means used center variables computing covariance specified target population.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"dual-variables","dir":"Reference","previous_headings":"","what":"Dual Variables","title":"Estimate Stable Balancing Weights — optweight","text":"Two types constraints may associated covariate: target constraints balance constraints. Target constraints require mean covariate (near) specific target value treatment group (whole group treatment continuous). Balance constraints require means covariate pairs treatments near . binary multi-category treatments, balance constraints redundant target constraints provided variable. continuous variables, balance constraints refer correlation treatment covariate redundant target constraints. duals component output, covariate dual variable nonredundant constraint placed . dual variable constraint instantaneous rate change objective function optimum corresponding change constraint. relationship linear, large changes constraint exactly map onto corresponding changes objective function optimum, close small changes constraint. example, covariate balance constraint .01 corresponding dual variable 40, increasing (.e., relaxing) constraint .025 decrease value objective function optimum approximately \\((.025 - .01) * 40 = .6\\). factor variables, optweight() takes sum absolute dual variables constraints levels reports single dual variable variable . summed dual variable works way dual variables continuous variables .","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Stable Balancing Weights — optweight","text":"Chattopadhyay, ., Cohn, E. R., & Zubizarreta, J. R. (2024). One-Step Weighting Generalize Transport Treatment Effect Estimates Target Population. American Statistician, 78(3), 280–289. doi:10.1080/00031305.2023.2267598 Källberg, D., & Waernbaum, . (2023). Large Sample Properties Entropy Balancing Estimators Average Causal Effects. Econometrics Statistics. doi:10.1016/j.ecosta.2023.11.004 Wang, Y., & Zubizarreta, J. R. (2020). Minimal dispersion approximately balancing weights: Asymptotic properties practical considerations. Biometrika, 107(1), 93–105. doi:10.1093/biomet/asz050 Zubizarreta, J. R. (2015). Stable Weights Balance Covariates Estimation Incomplete Outcome Data. Journal American Statistical Association, 110(511), 910–922. doi:10.1080/01621459.2015.1023805","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Stable Balancing Weights — optweight","text":"","code":"library(\"cobalt\") #>  cobalt (Version 4.6.1, Build Date: 2025-08-20) data(\"lalonde\", package = \"cobalt\")  # Balancing covariates between treatment groups (binary) (ow1 <- optweight(treat ~ age + educ + married +                     nodegree + re74, data = lalonde,                   tols = c(.01, .02, .03, .04, .05),                   estimand = \"ATE\")) #> An optweight object #>  - number of obs.: 614 #>  - norm minimized: \"l2\" #>  - sampling weights: present #>  - base weights: present #>  - treatment: 2-category #>  - estimand: ATE #>  - covariates: age, educ, married, nodegree, re74 bal.tab(ow1) #> Balance Measures #>             Type Diff.Adj #> age      Contin.    -0.00 #> educ     Contin.     0.02 #> married   Binary    -0.03 #> nodegree  Binary     0.04 #> re74     Contin.    -0.05 #>  #> Effective sample sizes #>            Control Treated #> Unadjusted   429.    185.  #> Adjusted     415.3   125.3  # Exactly alancing covariates with respect to race (multi-category) (ow2 <- optweight(race ~ age + educ + married +                     nodegree + re74, data = lalonde,                   tols = 0, estimand = \"ATT\",                   focal = \"black\")) #> An optweight object #>  - number of obs.: 614 #>  - norm minimized: \"l2\" #>  - sampling weights: present #>  - base weights: present #>  - treatment: 3-category (black, hispan, white) #>  - estimand: ATT (focal: black) #>  - covariates: age, educ, married, nodegree, re74 bal.tab(ow2) #> Balance summary across all treatment pairs #>             Type Max.Diff.Adj #> age      Contin.            0 #> educ     Contin.            0 #> married   Binary            0 #> nodegree  Binary            0 #> re74     Contin.            0 #>  #> Effective sample sizes #>            hispan  white black #> Unadjusted  72.   299.     243 #> Adjusted    45.96 181.39   243  # Balancing covariates between treatment groups (binary) # and requesting a specified target population targets <- process_targets(~ age + educ + married +                              nodegree + re74,                            data = lalonde,                            targets = c(26, 12, .4, .5,                                        1000))  (ow3a <- optweight(treat ~ age + educ + married +                      nodegree + re74, data = lalonde,                    targets = targets,                    estimand = NULL)) #> An optweight object #>  - number of obs.: 614 #>  - norm minimized: \"l2\" #>  - sampling weights: present #>  - base weights: present #>  - treatment: 2-category #>  - estimand: targets #>  - covariates: age, educ, married, nodegree, re74  bal.tab(ow3a, disp.means = TRUE) #> Note: `s.d.denom` not specified; assuming \"pooled\". #> Balance Measures #>             Type M.0.Adj M.1.Adj Diff.Adj #> age      Contin.    26.0    26.0       -0 #> educ     Contin.    12.0    12.0       -0 #> married   Binary     0.4     0.4       -0 #> nodegree  Binary     0.5     0.5       -0 #> re74     Contin.  1000.0  1000.0       -0 #>  #> Effective sample sizes #>            Control Treated #> Unadjusted  429.    185.   #> Adjusted    158.04   64.09  # Balancing covariates between treatment groups (binary) # and not requesting a target population (ow3b <- optweight(treat ~ age + educ + married +                      nodegree + re74, data = lalonde,                    targets = NULL,                    estimand = NULL)) #> An optweight object #>  - number of obs.: 614 #>  - norm minimized: \"l2\" #>  - sampling weights: present #>  - base weights: present #>  - treatment: 2-category #>  - estimand: targets #>  - covariates: age, educ, married, nodegree, re74  bal.tab(ow3b, disp.means = TRUE) #> Note: `s.d.denom` not specified; assuming \"pooled\". #> Balance Measures #>             Type   M.0.Adj   M.1.Adj Diff.Adj #> age      Contin.   26.4160   26.4160       -0 #> educ     Contin.   10.3547   10.3547       -0 #> married   Binary    0.3615    0.3615       -0 #> nodegree  Binary    0.6305    0.6305       -0 #> re74     Contin. 3908.9059 3908.9059       -0 #>  #> Effective sample sizes #>            Control Treated #> Unadjusted  429.    185.   #> Adjusted    382.74  139.23  # Balancing two treatments (ow4 <- optweightMV(list(treat ~ age + educ + race + re74,                          re75 ~ age + educ + race + re74),                     data = lalonde)) #> An optweightMV object #>  - number of obs.: 614 #>  - norm minimized: \"l2\" #>  - sampling weights: present #>  - base weights: present #>  - number of treatments: 2 #>     treat: 2-category #>     re75: continuous #>  - covariates:  #>     + for treat: age, educ, race, re74 #>     + for re75: age, educ, race, re74  summary(ow4) #> Summary of weights: #>  #>  - - - - - - - - - - Treatment 1 - - - - - - - - - - #> - Weight ranges: #>         Min                                  Max #> treated   0 |---------------------------| 8.7857 #> control   0 |--------------------|        6.7036 #>  #> - Units with 5 greatest weights by group: #>                                             #>             179    166    162    124     23 #>  treated 5.6823 5.9135 6.3998 6.8191 8.7857 #>             300     48     26     19     15 #>  control 3.8543 3.9551 3.9906 5.4178 6.7036 #>  #>            L2    L1    L∞ Rel Ent # Zeros #> treated 1.783 1.35  7.786   1.276       0 #> control 0.955 0.743 5.704   0.477       0 #>  #> - Effective Sample Sizes: #>            Control Treated #> Unweighted  429.    185.   #> Weighted    224.31   44.26 #>  #>  - - - - - - - - - - Treatment 2 - - - - - - - - - - #> - Weight ranges: #>     Min                                  Max #> all   0 |---------------------------| 8.7857 #>  #> - Units with 5 greatest weights by group: #>                                         #>         200    179    166    124     23 #>  all 5.9135 6.3998 6.7036 6.8191 8.7857 #>  #>        L2    L1    L∞ Rel Ent # Zeros #> all 1.263 0.926 7.786   0.718       0 #>  #> - Effective Sample Sizes: #>             Total #> Unweighted 614.   #> Weighted   236.54 #>   bal.tab(ow4) #> Balance by Time Point #>  #>  - - - Time: 1 - - -  #> Balance Measures #>                Type Diff.Adj #> age         Contin.       -0 #> educ        Contin.       -0 #> race_black   Binary       -0 #> race_hispan  Binary        0 #> race_white   Binary       -0 #> re74        Contin.       -0 #>  #> Effective sample sizes #>            Control Treated #> Unadjusted  429.    185.   #> Adjusted    224.31   44.26 #>  #>  - - - Time: 2 - - -  #> Balance Measures #>                Type Corr.Adj Diff.Target.Adj #> age         Contin.       -0               0 #> educ        Contin.       -0               0 #> race_black   Binary       -0               0 #> race_hispan  Binary       -0              -0 #> race_white   Binary       -0              -0 #> re74        Contin.       -0               0 #>  #> Effective sample sizes #>             Total #> Unadjusted 614.   #> Adjusted   236.54 #>  - - - - - - - - - - -  #>   # Using a different norm (ow1b <- optweight(treat ~ age + educ + married +                     nodegree + re74, data = lalonde,                   tols = c(.01, .02, .03, .04, .05),                   estimand = \"ATE\",                   norm = \"l1\")) #> An optweight object #>  - number of obs.: 614 #>  - norm minimized: \"l1\" #>  - sampling weights: present #>  - base weights: present #>  - treatment: 2-category #>  - estimand: ATE #>  - covariates: age, educ, married, nodegree, re74  summary(ow1b, weight.range = FALSE) #> Summary of weights: #>  #>           L2    L1     L∞ Rel Ent # Zeros #> treated 2.16 0.422 26.361   0.664       0 #> control 1.04 0.165 14.038   0.228       0 #>  #> - Effective Sample Sizes: #>            Control Treated #> Unweighted  429.    185.   #> Weighted    206.18   32.65 #>  summary(ow1, weight.range = FALSE) #> Summary of weights: #>  #>            L2    L1    L∞ Rel Ent # Zeros #> treated 0.69  0.536 3.419   0.198       0 #> control 0.182 0.165 0.409   0.017       0 #>  #> - Effective Sample Sizes: #>            Control Treated #> Unweighted   429.    185.  #> Weighted     415.3   125.3 #>   # Allowing for negative weights ow5 <- optweight(treat ~ age + educ + married + race +                    nodegree + re74 + re75,                  data = lalonde,                  estimand = \"ATE\",                  min.w = -Inf)  summary(ow5) #> Summary of weights: #>  #> - Weight ranges: #>             Min                                  Max #> treated -0.9868 |---------------------------| 7.2545 #> control  0.4069     |-----|                   2.1701 #>  #> - Units with 5 greatest weights by group: #>                                             #>             137    124     68     23     10 #>  treated 5.1933 5.2061  6.116 6.2053 7.2545 #>             388    375    226    196    118 #>  control  2.109 2.1096 2.1111  2.133 2.1701 #>  #>            L2    L1    L∞ # Zeros #> treated 1.608 1.216 6.254       0 #> control 0.499 0.39  1.17        0 #>  #> - Effective Sample Sizes: #>            Control Treated #> Unweighted  429.    185.   #> Weighted    343.49   51.57 #>"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"optweight.svy.fit() performs optimization optweight.svy() , cases, used directly. Little processing inputs performed, must given exactly described .","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"","code":"optweight.svy.fit(   covs,   targets,   tols = 0,   s.weights = NULL,   b.weights = NULL,   norm = \"l2\",   std.binary = FALSE,   std.cont = TRUE,   min.w = 1e-08,   verbose = FALSE,   solver = NULL,   ... )"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"covs numeric matrix covariates targeted. targets vector target population mean values covariate. resulting weights yield sample means within tols units target values covariate. target values NA, corresponding variable targeted weighted mean wherever weights yield smallest variance. ensure weighted mean covariate equal unweighted mean (.e., original mean target mean), original mean must supplied target. tols vector target balance tolerance values. Default 0. s.weights optional vector sampling weights. Default vector 1s. b.weights optional vector base weights. Default vector 1s. norm character; string containing name norm corresponding objective function minimize. Allowable options include \"l1\" L1 norm, \"l2\" L2 norm (default), \"linf\" L\\(\\infty\\) norm, \"entropy\" negative entropy, \"log\" sum negative logs. See Details optweight.fit() information. std.binary, std.cont logical; whether tolerances standardized mean units (TRUE) raw units (FALSE) binary variables continuous variables, respectively. default FALSE std.binary raw proportion differences make sense standardized mean difference binary variables. arguments analogous binary continuous arguments bal.tab() cobalt. min.w numeric; single value less 1 smallest allowable weight. analyses require nonzero weights units, small, nonzero minimum may desirable. default 1e-8 (\\(10^{-8}\\)), materially change properties weights minimum 0 prevents warnings packages use weights estimate treatment effects. norm \"entropy\" \"log\" min.w <= 0, min.w set smallest nonzero value. verbose logical; whether information optimization problem solution printed. Default FALSE. solver string; name optimization solver use. Allowable options depend norm. Default use whichever eligible solver installed, , default solver corresponding norm. See Details optweight.fit() information. ... Options passed settings function corresponding solver.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"optweight.svy.fit object following elements: w estimated weights, one unit. duals data.frame containing dual variables covariate. See Zubizarreta (2015) interpretation values. info list containing information performance optimization termination.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"optweight.svy.fit() transforms inputs required inputs optimization functions, (sparse) matrices vectors, supplies outputs (weights, dual variables, convergence information) back optweight.svy(). Little processing inputs performed, normally handled optweight.svy(). Target constraints applied product estimated weights sampling weights. addition, sum product estimated weights sampling weights constrained equal sum product base weights sampling weights.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"Zubizarreta, J. R. (2015). Stable Weights Balance Covariates Estimation Incomplete Outcome Data. Journal American Statistical Association, 110(511), 910–922. doi:10.1080/01621459.2015.1023805","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  covs <- splitfactor(lalonde[c(\"age\", \"educ\", \"race\",                               \"married\", \"nodegree\")],                     drop.first = FALSE)  targets <- c(23, 9, .3, .3, .4, .2, .5)  ows.fit <- optweight.svy.fit(covs,                              targets = targets,                              norm = \"l2\")  #Unweighted means col_w_mean(covs) #>         age        educ  race_black race_hispan  race_white     married  #>  27.3631922  10.2687296   0.3957655   0.1172638   0.4869707   0.4153094  #>    nodegree  #>   0.6302932   #Weighted means; same as targets col_w_mean(covs, w = ows.fit$w) #>         age        educ  race_black race_hispan  race_white     married  #>        23.0         9.0         0.3         0.3         0.4         0.2  #>    nodegree  #>         0.5"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Targeting Weights Using Optimization — optweight.svy","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"Estimate targeting weights covariates specified formula. target means specified targets maximum distance weighted covariate mean corresponding target mean specified tols. See Zubizarreta (2015) details properties weights methods used fit .","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"","code":"optweight.svy(   formula,   data = NULL,   tols = 0,   targets = NULL,   s.weights = NULL,   b.weights = NULL,   norm = \"l2\",   verbose = FALSE,   ... )"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"formula formula nothing left hand side covariates targeted right hand side. See glm() details. Interactions functions covariates allowed. data optional data set form data frame contains variables formula. tols vector target balance tolerance values covariate. resulting weighted covariate means away targets specified values. one value supplied, applied covariates. Can also output call process_tols(). targets vector target population mean values baseline covariate. resulting weights yield sample means within tols/2 units target values covariate. NULL NA, estimand used determine targets. Otherwise, estimand ignored. target values NA, corresponding variable targeted weighted mean wherever weights yield smallest variance. Can also output call process_targets(). See Details. s.weights vector sampling weights name variable data contains sampling weights. b.weights vector base weights name variable data contains base weights. supplied, desired norm distance estimated weights base weights minimized. norm character; string containing name norm corresponding objective function minimize. Allowable options include \"l1\" L1 norm, \"l2\" L2 norm (default), \"linf\" L\\(\\infty\\) norm, \"entropy\" negative entropy, \"log\" sum logs. See optweight.fit() details. verbose logical; whether information optimization problem solution printed. Default FALSE. ... Arguments passed optweight.svy.fit std.binary,std.cont logical; whether tolerances standardized mean units (TRUE) raw units (FALSE) binary variables continuous variables, respectively. default FALSE std.binary raw proportion differences make sense standardized mean difference binary variables. arguments analogous binary continuous arguments bal.tab() cobalt. min.w numeric; single value less 1 smallest allowable weight. analyses require nonzero weights units, small, nonzero minimum may desirable. default 1e-8 (\\(10^{-8}\\)), materially change properties weights minimum 0 prevents warnings packages use weights estimate treatment effects. norm \"entropy\" \"log\" min.w <= 0, min.w set smallest nonzero value.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"optweight.svy object following elements: weights estimated weights, one unit. covs covariates used fitting. includes raw covariates, may altered fitting process. s.weights provided sampling weights. call function call. tols tolerance values covariate. duals data.frame containing dual variables covariate. See optweight() interpretation values. info Information performance optimization termination.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"optimization performed lower-level function optweight.svy.fit(). Weights estimated standardized differences weighted covariate means corresponding targets within given tolerance thresholds (unless std.binary std.cont FALSE, case unstandardized mean differences considered binary continuous variables, respectively). covariate \\(x\\) specified tolerance \\(\\delta\\), weighted mean within \\(\\delta\\) target. standardized tolerance values requested, standardization factor standard deviation covariate whole sample. standardization factor always unweighted. See optweight() help page information interpreting dual variables solving convergence failure.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"Zubizarreta, J. R. (2015). Stable Weights Balance Covariates Estimation Incomplete Outcome Data. Journal American Statistical Association, 110(511), 910–922. doi:10.1080/01621459.2015.1023805","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  cov.formula <- ~ age + educ + race + married + nodegree  targets <- process_targets(cov.formula, data = lalonde,                            targets = c(23, 9, .3, .3, .4,                                        .2, .5))  ows <- optweight.svy(cov.formula,                      data = lalonde,                      tols = 0,                      targets = targets) ows #> An optweight.svy object #>  - number of obs.: 614 #>  - norm minimized: \"l2\" #>  - sampling weights: present #>  - base weights: present #>  - covariates: age, educ, race, married, nodegree  #Unweighted means col_w_mean(ows$covs) #>         age        educ  race_black race_hispan  race_white     married  #>  27.3631922  10.2687296   0.3957655   0.1172638   0.4869707   0.4153094  #>    nodegree  #>   0.6302932   #Weighted means; same as targets col_w_mean(ows$covs, w = ows$weights) #>         age        educ  race_black race_hispan  race_white     married  #>        23.0         9.0         0.3         0.3         0.4         0.2  #>    nodegree  #>         0.5"},{"path":"https://ngreifer.github.io/optweight/reference/plot.optweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","title":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","text":"Plots dual variables resulting optweight() way similar figure 2 Zubizarreta (2015), explained interpret values. represent cost changing constraint variance resulting weights. covariates large values dual variable, tightening constraint increase variability weights, loosening constraint decrease variability weights, greater extent covariate small values dual variable.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/plot.optweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","text":"","code":"# S3 method for class 'optweight' plot(x, ...)  # S3 method for class 'optweightMV' plot(x, which.treat = 1, ...)  # S3 method for class 'optweight.svy' plot(x, ...)"},{"path":"https://ngreifer.github.io/optweight/reference/plot.optweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","text":"x optweight, optweightMV, optweight.svy object; output call optweight(), optweightMV(), optweight.svy(). ... Ignored. .treat optweightMV objects, treatment display. one may displayed time.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/plot.optweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","text":"ggplot object can used ggplot2 functions.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/plot.optweight.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","text":"Zubizarreta, J. R. (2015). Stable Weights Balance Covariates Estimation Incomplete Outcome Data. Journal American Statistical Association, 110(511), 910–922. doi:10.1080/01621459.2015.1023805","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/plot.optweight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  tols <- process_tols(treat ~ age + educ + married +                        nodegree + re74, data = lalonde,                      tols = .1)  #Balancing covariates between treatment groups (binary) ow1 <- optweight(treat ~ age + educ + married +                    nodegree + re74, data = lalonde,                  tols = tols,                  estimand = \"ATT\")  summary(ow1) # Note the RMSE Dev and effective #> Summary of weights: #>  #> - Weight ranges: #>         Min                                  Max #> treated   1                   ||          1.     #> control   0 |---------------------------| 1.5946 #>  #> - Units with 5 greatest weights by group: #>                                             #>               1      2      3      4      5 #>  treated      1      1      1      1      1 #>              79    118    127    156    164 #>  control 1.5946 1.5946 1.5946 1.5946 1.5946 #>  #>            L2    L1 L∞ Rel Ent # Zeros #> treated 0.    0.     0   0.          0 #> control 0.532 0.462  1   0.181       0 #>  #> - Effective Sample Sizes: #>            Control Treated #> Unweighted  429.       185 #> Weighted    334.41     185 #>  #              sample size (ESS)  plot(ow1) # age has a low value, married is high   tols[\"age\"] <- 0 ow2 <- optweight(treat ~ age + educ + married +                    nodegree + re74, data = lalonde,                  tols = tols,                  estimand = \"ATT\")  summary(ow2) # Notice that tightening the constraint #> Summary of weights: #>  #> - Weight ranges: #>         Min                                  Max #> treated   1                  ||           1.     #> control   0 |---------------------------| 1.7539 #>  #> - Units with 5 greatest weights by group: #>                                             #>               1      2      3      4      5 #>  treated      1      1      1      1      1 #>             419    404    412    387    395 #>  control 1.7343 1.7441 1.7441 1.7539 1.7539 #>  #>            L2    L1 L∞ Rel Ent # Zeros #> treated 0.    0.     0   0.          0 #> control 0.534 0.465  1   0.183       0 #>  #> - Effective Sample Sizes: #>            Control Treated #> Unweighted  429.       185 #> Weighted    333.86     185 #>  #              on age had a negligible effect on the #              variability of the weights and ESS  tols[\"age\"] <- .1 tols[\"married\"] <- 0 ow3 <- optweight(treat ~ age + educ + married +                    nodegree + re74, data = lalonde,                  tols = tols,                  estimand = \"ATT\")  summary(ow3) # In contrast, tightening the constraint #> Summary of weights: #>  #> - Weight ranges: #>         Min                                  Max #> treated   1                ||             1.     #> control   0 |---------------------------| 1.8712 #>  #> - Units with 5 greatest weights by group: #>                                            #>              1      2      3      4      5 #>  treated     1      1      1      1      1 #>            419    404    412    387    395 #>  control 1.857 1.8641 1.8641 1.8712 1.8712 #>  #>            L2    L1 L∞ Rel Ent # Zeros #> treated 0.    0.     0   0.          0 #> control 0.676 0.647  1   0.277       0 #>  #> - Effective Sample Sizes: #>            Control Treated #> Unweighted  429.       185 #> Weighted    294.35     185 #>  #              on married had a large effect on the #              variability of the weights, shrinking #              the ESS"},{"path":"https://ngreifer.github.io/optweight/reference/process_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct and Check Targets Input — process_targets","title":"Construct and Check Targets Input — process_targets","text":"Checks whether proposed target population means values targets suitable number order submission optweight() optweight.svy(). Users include one value per variable formula. factor variables, one value per level variable required. output process_targets() can also used input targets optweight() optweight.svy().","code":""},{"path":"https://ngreifer.github.io/optweight/reference/process_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct and Check Targets Input — process_targets","text":"","code":"process_targets(formula, data = NULL, targets = NULL, s.weights = NULL)  check.targets(...)  # S3 method for class 'optweight.targets' print(x, digits = 5, ...)"},{"path":"https://ngreifer.github.io/optweight/reference/process_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct and Check Targets Input — process_targets","text":"formula formula covariates targeted right-hand side. See glm() details. Interactions functions covariates allowed. Can omitted, case variables data assumed targeted. data optional data set form data frame contains variables formula. targets vector target population mean values covariate. order corresponding order corresponding variable formula, except interactions, appear lower-order terms. factor variables, target value must specified level factor, values must add 1. NULL, current sample means produced (weighted s.weights). NA, NA vector named covariate names produced. s.weights optional vector sampling weights. Default vector 1s. ... ignored. x optweight.targets object; output call process_targets(). digits many digits print.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/process_targets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct and Check Targets Input — process_targets","text":"optweight.targets object, named vector target population mean values, one (expanded) covariate specified formula. used user inputs optweight() optweight.svy().","code":""},{"path":"https://ngreifer.github.io/optweight/reference/process_targets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct and Check Targets Input — process_targets","text":"purpose process_targets() allow users ensure proposed input targets optweight() optweight.svy() correct number entries order. especially important factor variables interactions included formula factor variables split several dummies interactions moved end variable list, can cause confusion potential error entering targets values. Factor variables internally split dummy variable level, user must specify target population mean value level factor. must add 1, error displayed . values represent proportion units target population factor level. Interactions (e.g., :b *b formula input) always sent end variable list even specified elsewhere formula. important run process_targets() ensure order proposed targets corresponds represented order covariates used formula. can run process_targets(., targets = NA) see order covariates required without specifying targets.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/process_targets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct and Check Targets Input — process_targets","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  # Generating targets; means by default targets <- process_targets(~ age + race + married +                              nodegree + re74,                            data = lalonde)  # Notice race is split into three values targets #> - targets: #>         age  race_black race_hispan  race_white     married    nodegree  #>    27.36319     0.39577     0.11726     0.48697     0.41531     0.63029  #>        re74  #>  4557.54657   # Generating targets; NA by default targets <- process_targets(~ age + race + married +                              nodegree + re74,                            data = lalonde,                            targets = NA) targets #> - vars: #> \tage   race_black   race_hispan   race_white   married   nodegree   re74  # Can also supply just a dataset covs <- lalonde |>   subset(select = c(age, race, married,                     nodegree, re74))  targets <- process_targets(covs)  targets #> - targets: #>         age  race_black race_hispan  race_white     married    nodegree  #>    27.36319     0.39577     0.11726     0.48697     0.41531     0.63029  #>        re74  #>  4557.54657"},{"path":"https://ngreifer.github.io/optweight/reference/process_tols.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct and Check Tolerance Input — process_tols","title":"Construct and Check Tolerance Input — process_tols","text":"Checks whether proposed tolerance values tols suitable number order submission optweight(). Users include one value per item formula. output can also used input tols optweight().","code":""},{"path":"https://ngreifer.github.io/optweight/reference/process_tols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct and Check Tolerance Input — process_tols","text":"","code":"process_tols(formula, data = NULL, tols = 0)  check.tols(...)  # S3 method for class 'optweight.tols' print(x, internal = FALSE, digits = 5, ...)"},{"path":"https://ngreifer.github.io/optweight/reference/process_tols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct and Check Tolerance Input — process_tols","text":"formula formula covariates balanced right-hand side. See glm() details. Interactions functions covariates allowed. Lists formulas allowed; multiple formulas must checked one time. data optional data set form data frame contains variables formula. tols vector balance tolerance values standardized mean difference units covariate. order corresponding order corresponding variable formula, except interactions, appear lower-order terms. one value supplied, applied covariates. ... ignored. x optweight.tols object; output call process_tols(). internal logical; whether print tolerance values used internally optweight(). See Value section. digits many digits print.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/process_tols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct and Check Tolerance Input — process_tols","text":"optweight.tols object, named vector tolerance values, one variable specified formula. used user inputs optweight(). \"internal.tols\" attribute contains tolerance values used internally optweight(). differ vector values factor variables split ; user needs submit one tolerance per factor variable, separate tolerance values produced new dummy created.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/process_tols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct and Check Tolerance Input — process_tols","text":"purpose process_tols() allow users ensure proposed input tols optweight() correct number entries order. especially important factor variables interactions included formula factor variables split several dummies interactions moved end variable list, can cause confusion potential error entering tols values. Factor variables internally split dummy variable level, user needs specify one tolerance value per original variable; process_tols() automatically expands tols input match newly created variables. Interactions (e.g., :b *b formula input) always sent end variable list even specified elsewhere formula. important run process_tols() ensure order proposed tols corresponds represented order covariates used optweight(). can run process_tols() tols input see order covariates required. process_tols() designed used primarily message printing print() method, can also assign output object use input tols optweight(). Note one formula vector tolerance values can assessed time; multiple treatments, formula tolerance vector must entered separately.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/process_tols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct and Check Tolerance Input — process_tols","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  # Generating tols; 0 by default tols <- process_tols(treat ~ age + educ + married +                        nodegree + re74,                      data = lalonde)  tols #> - tols: #>      age     educ  married nodegree     re74  #>        0        0        0        0        0   tols <- process_tols(treat ~ age + educ + married +                        nodegree + re74,                      data = lalonde,                      tols = .05)  tols #> - tols: #>      age     educ  married nodegree     re74  #>     0.05     0.05     0.05     0.05     0.05   # Checking the order of interactions; notice they go # at the end even if specified at the beginning. tols <- process_tols(treat ~ age:educ + married*race +                        nodegree + re74,                      data = lalonde,                      tols = .05)  tols #> - tols: #>      married         race     nodegree         re74     age:educ married:race  #>         0.05         0.05         0.05         0.05         0.05         0.05   # Internal tolerances for expanded covariates print(tols, internal = TRUE) #> - tols: #>      married         race     nodegree         re74     age:educ married:race  #>         0.05         0.05         0.05         0.05         0.05         0.05  #>  #> - tols used internally by optweight: #>             married          race_black         race_hispan          race_white  #>                0.05                0.05                0.05                0.05  #>            nodegree                re74            age:educ  married:race_black  #>                0.05                0.05                0.05                0.05  #> married:race_hispan  married:race_white  #>                0.05                0.05"},{"path":"https://ngreifer.github.io/optweight/reference/summary.optweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize, print, and plot information about estimated weights — summary.optweight","title":"Summarize, print, and plot information about estimated weights — summary.optweight","text":"functions summarize weights resulting call optweight() optweight.svy(). summary() produces summary statistics distribution weights, including range variability, effective sample size weighted sample (computing using formula McCaffrey, Rudgeway, & Morral, 2004). plot() creates histogram weights.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/summary.optweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize, print, and plot information about estimated weights — summary.optweight","text":"","code":"# S3 method for class 'optweight' summary(object, top = 5, ignore.s.weights = FALSE, weight.range = TRUE, ...)  # S3 method for class 'optweightMV' summary(object, top = 5, ignore.s.weights = FALSE, weight.range = TRUE, ...)  # S3 method for class 'optweight.svy' summary(object, top = 5, ignore.s.weights = FALSE, weight.range = TRUE, ...)  # S3 method for class 'summary.optweight' plot(x, ...)"},{"path":"https://ngreifer.github.io/optweight/reference/summary.optweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize, print, and plot information about estimated weights — summary.optweight","text":"object optweight, optweightMV, optweight.svy object; output call optweight() optweight.svy(). top many largest smallest weights display. Default 5. ignore.s.weights Whether ignore sampling weights computing weight summary. FALSE, default, estimated weights multiplied sampling weights () values computed. weight.range logical; whether display statistics range weights highest lowest weights group. Default TRUE. ... Additional arguments. plot(), additional arguments passed graphics::hist() determine number bins, though ggplot2::geom_histogram() ggplot2 actually used create plot. x summary.optweight, summary.optweightMV, summary.optweight.svy object; output call summary.optweight(), summary.optweightMV(), ()summary.optweight.svy.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/summary.optweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize, print, and plot information about estimated weights — summary.optweight","text":"point treatments (.e., optweight objects), summary() returns summary.optweight object following elements: weight.range range (minimum maximum) weight treatment group. weight.top units greatest weights treatment group; many included determined top. l2 square root L2 norm estimated weights base weights, weighted sampling weights (): \\(\\sqrt{\\frac{1}{n}\\sum_i {s_i(w_i - b_i)^2}}\\) l1 L1 norm estimated weights base weights, weighted sampling weights (): \\(\\frac{1}{n}\\sum_i {s_i \\vert w_i - b_i \\vert}\\) linf L\\(\\infty\\) norm (maximum absolute deviation) estimated weights base weights: \\(\\max_i {\\vert w_i - b_i \\vert}\\) rel.ent relative entropy estimated weights base weights (entropy norm), weighted sampling weights (): \\(\\frac{1}{n}\\sum_i {s_i w_i \\log\\left(\\frac{w_i}{b_i}\\right)}\\). computed weights positive. num.zeros number units weight equal 0. effective.sample.size effective sample size treatment group weighting. multivariate treatments (.e., optweightMV objects), list elements treatment. optweight.svy objects, list elements treatment group divisions. plot() returns ggplot object histogram displaying distribution estimated weights. estimand ATT ATC, weights non-focal group(s) displayed (since weights focal group 1). dotted line displayed mean weights (mean base weights, 1 supplied).","code":""},{"path":"https://ngreifer.github.io/optweight/reference/summary.optweight.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarize, print, and plot information about estimated weights — summary.optweight","text":"McCaffrey, D. F., Ridgeway, G., & Morral, . R. (2004). Propensity Score Estimation Boosted Regression Evaluating Causal Effects Observational Studies. Psychological Methods, 9(4), 403–425. doi:10.1037/1082-989X.9.4.403","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/summary.optweight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize, print, and plot information about estimated weights — summary.optweight","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  #Balancing covariates between treatment groups (binary) (ow1 <- optweight(treat ~ age + educ + married +                     nodegree + re74, data = lalonde,                   tols = .001,                   estimand = \"ATT\")) #> An optweight object #>  - number of obs.: 614 #>  - norm minimized: \"l2\" #>  - sampling weights: present #>  - base weights: present #>  - treatment: 2-category #>  - estimand: ATT (focal: 1) #>  - covariates: age, educ, married, nodegree, re74  (s <- summary(ow1)) #> Summary of weights: #>  #> - Weight ranges: #>         Min                                  Max #> treated   1           ||                  1.     #> control   0 |---------------------------| 3.0186 #>  #> - Units with 5 greatest weights by group: #>                                             #>               1      2      3      4      5 #>  treated      1      1      1      1      1 #>             404    226    224    111     84 #>  control 2.5106 2.5273 2.6258 2.7208 3.0186 #>  #>            L2    L1    L∞ Rel Ent # Zeros #> treated 0.    0.    0.       0.         0 #> control 0.783 0.694 2.019    0.39       0 #>  #> - Effective Sample Sizes: #>            Control Treated #> Unweighted  429.       185 #> Weighted    265.88     185 #>   plot(s, breaks = 12)"},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-100","dir":"Changelog","previous_headings":"","what":"optweight 1.0.0","title":"optweight 1.0.0","text":"CRAN release: 2025-09-09 version involved full rewrite may backward compatible prior versions. Basic functionality changed, advanced functionality changed. Added new function, optweightMV(), performing weighting multivariate treatments. takes place old functionality optweight() take list formulas. Documentation supporting text updated emphasize purpose function multivariate treatments, longitudinal treatments previously documented. Note optweight() now throws error list formulas supplied. lower-level version, optweightMV.fit(), also available. check.tols() check.targets() renamed process_tols() process_targets(), respectively, new functionality. stop argument removed. process_targets() now accepts s.weights compute sampling-weighted target means. norm can set \"entropy\" optweight(), etc., minimizes negative entropy weights. equivalent entropy balancing, implemented efficiently WeightIt, support inexact balance multivariate treatments. norm can also set \"log\" optweight(), etc., minimizes sum negative log weights. equivalent nonparametric covariate balancing propensity score (npCBPS) weighting, version implemented CBPS. implementation support inexact balance multivariate treatments. Negative values now allowed min.w argument. Different solvers can used supplying argument solver. See ?optweight.fit() defaults allowable options. optweight.svy(), process_tols(), process_targets() can supplied without formula, uses variables supplied data. Documentation now roxygen2. Added new vignette (vignette(\"optweight\")). Added b.weights argument supply base weights. supplied, rather minimizing variance weights, squared distance base weight minimized, mirroring functionality base.weights argument ebalance entropy balancing. norms now support base weights. Omitting base weights equivalent setting equal 1. Optimization proceeds differently s.weights supplied. First, L\\(\\infinity\\) used sampling weights. Second, norm minimized weighted norm difference estimated weights base weights, estimated weights incorporating sampling weights. , L2 norm minimizes \\(\\sum_i s_i(w_i-b_i)^2\\), L1 norm minimizes \\(\\sum_i s_i|w_i-b_i|\\), \\(s_i\\) sampling weight unit \\(\\), \\(b_i\\) base weight (1 default), \\(w_i\\) weights estimated. weights used balance constraints (ultimately effect estimation) \\(w^*_i=s_i w_i\\). implication ESS \\(w^*_i\\) maximized L2 norm. also ensures weighted bootstrap correctly accounts estimation weights. summary() now displays L2, L1, L\\(\\infinity\\) norms relative entropy estimated weights base weights, number weights estimated 0. L2 L1 norms relative entropy weighted s.weights present. polish now TRUE default norms \"entropy\"; slightly improves estimation. default arguments solvers changed. Formula interfaces now accept poly(x, .) matrix-generating functions variables, including rms-class-generating functions rms package (e.g., pol(), rcs(), etc.) (rms package must loaded use latter ones) basis-class-generating functions splines package (.e., bs() ns()). bug early version found @ahinton-mmc. returned covariates now without transformations. Updated README. Added new logo.","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-025","dir":"Changelog","previous_headings":"","what":"optweight 0.2.5","title":"optweight 0.2.5","text":"CRAN release: 2019-09-16 Reverting back using osqp instead rosqp now osqp works. cobalt back.","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-024","dir":"Changelog","previous_headings":"","what":"optweight 0.2.4","title":"optweight 0.2.4","text":"CRAN release: 2019-09-03 Reverting back using rosqp instead osqp due package failure. Also removed reliance cobalt favor MatchIt data. changes temporary.","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-023","dir":"Changelog","previous_headings":"","what":"optweight 0.2.3","title":"optweight 0.2.3","text":"CRAN release: 2019-08-25 rosqp package now osqp, faster fewer bugs. focal set, estimand automatically changed \"ATT\". past, focal ignored unless estimand = \"ATT\". Fixed bugs processing formula inputs. particular, functions can used inside lapply() loops nested functions gracefully. bugs fixes small changes.","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-022","dir":"Changelog","previous_headings":"","what":"optweight 0.2.2","title":"optweight 0.2.2","text":"CRAN release: 2019-03-04 Fixed bug duals displaying improperly factor variables present.","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-021","dir":"Changelog","previous_headings":"","what":"optweight 0.2.1","title":"optweight 0.2.1","text":"CRAN release: 2019-01-16 Changed default min.w optweight.fit() optweight.svy.fit() 1E-8 0. ensures weights nonzero, can reduce bugs functions require nonzero weights (e.g, jtools::summ() survey::svyglm()). Fixed warning occur interactions present model formula optweight(). Stable balancing weights discovered invalid longitudinal treatments, attempting use optweight()optweight.fit() longitudinal treatments now produce error. can overridden setting force = TRUE, though recommended research done.","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-020","dir":"Changelog","previous_headings":"","what":"optweight 0.2.0","title":"optweight 0.2.0","text":"CRAN release: 2018-10-17 Added optweight.svy() associated methods functions estimating survey weights using optimization. weights applied sample yield sample whose covariate means equal (within specified tolerance) given target values. Minor changes check.targets(). now produce covariate means targets argument empty produce previous empty output, named vector NAs, targets = NULL. Changes dual variables processed displayed. Now, dual variable coming optweight() represents change objective function corresponding 1-unit change tols. reported duals sum duals affected constraint, can now reliably predict change objective function change tols (obscured error-prone previously). distinction targeting duals balance duals maintained.","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-010","dir":"Changelog","previous_headings":"","what":"optweight 0.1.0","title":"optweight 0.1.0","text":"CRAN release: 2018-09-21 First version!","code":""}]
