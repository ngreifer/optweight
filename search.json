[{"path":"https://ngreifer.github.io/optweight/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Noah Greifer. Author, maintainer.","code":""},{"path":"https://ngreifer.github.io/optweight/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Greifer N (2025). optweight: Targeted Stable Balancing Weights Using Optimization. R package version 0.2.5.9002, https://ngreifer.github.io/optweight/.","code":"@Manual{,   title = {optweight: Targeted Stable Balancing Weights Using Optimization},   author = {Noah Greifer},   year = {2025},   note = {R package version 0.2.5.9002},   url = {https://ngreifer.github.io/optweight/}, }"},{"path":"https://ngreifer.github.io/optweight/index.html","id":"optweight","dir":"","previous_headings":"","what":"Targeted Stable Balancing Weights Using Optimization","title":"Targeted Stable Balancing Weights Using Optimization","text":"optweight contains functions estimate weights balance treatments given balance thresholds. solves quadratic programming problem minimize objective function weights using solve_osqp() osqp package. method described Zubizarreta (2015). optweight extends method multinomial, continuous, longitudinal treatments provides simple user interface compatibility cobalt package. example estimating weights optweight assessing balance covariates cobalt. Est. 2.5% 97.5% t val. p (Intercept) 5342.94 4058.75 6627.13 8.17 0.00 treat 1006.20 -710.34 2722.74 1.15 0.25 Standard errors: Robust, type = HC3 lower-level function optweight.fit operates covariates treatment variables directly. addition estimating balancing weights estimating treatment effects, optweight can estimate sampling weights generalizing estimate new target population defined covariate moments using function optweight.svy.","code":"devtools::install_github(\"ngreifer/optweight\") #development version library(\"optweight\") library(\"cobalt\") data(\"lalonde\")  #Estimate weights ow <- optweight(treat ~ age + educ + race + nodegree + married +                   re74 + re75 + I(re74 == 0) + I(re75 == 0),                 data = lalonde, estimand = \"ATT\", tols = .01) ow An optweight object  - number of obs.: 614  - sampling weights: none  - treatment: 2-category  - estimand: ATT (focal: 1)  - covariates: age, educ, race, nodegree, married, re74, re75, I(re74 == 0), I(re75 == 0) summary(ow) Summary of weights:  - Weight ranges:         Min                                  Max treated   1     ||                        1.0000 control   0 |---------------------------| 7.4319  - Units with 5 greatest weights by group:                                                           2      3      4      5      6  treated      1      1      1      1      1             608    574    559    573    303  control 7.2344 7.3161 7.4058 7.4058 7.4319          Coef of Var Mean Abs Dev treated      0.0000       0.0000 control      1.9019       1.3719 overall      1.5897       0.9585  - Effective Sample Sizes:            Control Treated Unweighted 429.000     185 Weighted    92.917     185 bal.tab(ow) Call  optweight(formula = treat ~ age + educ + race + nodegree + married +      re74 + re75 + I(re74 == 0) + I(re75 == 0), data = lalonde,      tols = 0.01, estimand = \"ATT\")  Balance Measures                 Type Diff.Adj age          Contin.     0.01 educ         Contin.     0.01 race_black    Binary     0.01 race_hispan   Binary     0.00 race_white    Binary    -0.01 nodegree      Binary     0.01 married       Binary    -0.01 re74         Contin.     0.01 re75         Contin.     0.01 I(re74 == 0)  Binary     0.01 I(re75 == 0)  Binary     0.01  Effective sample sizes            Control Treated Unadjusted 429.000     185 Adjusted    92.917     185 #Estimate a treatment effect library(\"jtools\") summ(lm(re78 ~ treat, data = lalonde, weights = ow$weights),      confint = TRUE, robust = TRUE, model.fit = FALSE,       model.info = FALSE)"},{"path":"https://ngreifer.github.io/optweight/reference/check_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct and Check Targets Input — check_targets","title":"Construct and Check Targets Input — check_targets","text":"Checks whether proposed target population means values targets suitable number order submission optweight() optweight.svy(). Users include one value per variable formula. factor variables, one value per level variable required. output check_targets() can also used input targets optweight() optweight.svy().","code":""},{"path":"https://ngreifer.github.io/optweight/reference/check_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct and Check Targets Input — check_targets","text":"","code":"check_targets(formula, data = NULL, targets, stop = FALSE)  check.targets(...)  # S3 method for class 'optweight.targets' print(x, digits = 5, ...)"},{"path":"https://ngreifer.github.io/optweight/reference/check_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct and Check Targets Input — check_targets","text":"formula formula covariates balanced optweight() right-hand side. See glm() details. Interactions functions covariates allowed. data optional data set form data frame contains variables formula. targets vector target population mean values covariate. order corresponding order corresponding variable formula, except interactions, appear lower-order terms. factor variables, target value must specified level factor, values must add 1. empty, current sample means produced. NULL, NA vector named covariate names produced. stop Logical; TRUE, error thrown number values targets equal correct number (expanded) covariates formula, messages displayed targets input satisfactory. FALSE, message displayed number values targets equal correct number covariates formula, messages displayed. ... Ignored. x optweight.targets object; output call check_targets(). digits many digits print.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/check_targets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct and Check Targets Input — check_targets","text":"optweight.targets object, named vector target population mean values, one (expanded) covariate specified formula. used user inputs optweight() optweight.svy().","code":""},{"path":"https://ngreifer.github.io/optweight/reference/check_targets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct and Check Targets Input — check_targets","text":"purpose check_targets() allow users ensure proposed input targets optweight() optweight.svy() correct number entries order. especially important factor variables interactions included formula factor variables split several dummies interactions moved end variable list, can cause confusion potential error entering targets values. Factor variables internally split dummy variable level, user must specify target population mean value level factor. must add 1, error displayed . values represent proportion units target population factor level. Interactions (e.g., :b *b formula input) always sent end variable list even specified elsewhere formula. important run check_targets() ensure order proposed targets corresponds represented order covariates used formula. can run check_targets(targets = NULL) see order covariates required without specifying targets.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/check_targets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct and Check Targets Input — check_targets","text":"","code":"library(\"cobalt\") #>  cobalt (Version 4.6.0, Build Date: 2025-04-15) data(\"lalonde\", package = \"cobalt\")  # Checking if the correct number of entries are included: check_targets(treat ~ age + race + married +                 nodegree + re74,               data = lalonde,               targets = c(25, .4, .1, .5, .3,                           .5, 4000)) #> - targets: #>         age  race_black race_hispan  race_white     married    nodegree  #>        25.0         0.4         0.1         0.5         0.3         0.5  #>        re74  #>      4000.0  # Notice race is split into three values (.4, .1, and .5)"},{"path":"https://ngreifer.github.io/optweight/reference/check_tols.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct and Check Tolerance Input — check_tols","title":"Construct and Check Tolerance Input — check_tols","text":"Checks whether proposed tolerance values tols suitable number order submission optweight(). Users include one value per item formula. output can also used input tols optweight().","code":""},{"path":"https://ngreifer.github.io/optweight/reference/check_tols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct and Check Tolerance Input — check_tols","text":"","code":"check_tols(formula, data = NULL, tols, stop = FALSE)  check.tols(...)  # S3 method for class 'optweight.tols' print(x, internal = FALSE, digits = 5, ...)"},{"path":"https://ngreifer.github.io/optweight/reference/check_tols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct and Check Tolerance Input — check_tols","text":"formula formula covariates balanced optweight() right-hand side. See glm() details. Interactions functions covariates allowed. Lists formulas allowed; multiple formulas must checked one time. data optional data set form data frame contains variables formula. tols vector balance tolerance values standardized mean difference units covariate. order corresponding order corresponding variable formula, except interactions, appear lower-order terms. one value supplied, applied covariates. stop Logical; TRUE, error thrown number values tols equal correct number covariates formula, messages displayed tols input satisfactory. FALSE, message displayed number values tols equal correct number covariates formula, messages displayed. ... Ignored. x optweight.tols object; output call check_tols(). internal Logical; whether print tolerance values used internally optweight(). See Value section. digits many digits print.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/check_tols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct and Check Tolerance Input — check_tols","text":"optweight.tols object, named vector tolerance values, one variable specified formula. used user inputs optweight(). \"internal.tols\" attribute contains tolerance values used internally optweight(). differ vector values factor variables split ; user needs submit one tolerance per factor variable, separate tolerance values produced new dummy created.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/check_tols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct and Check Tolerance Input — check_tols","text":"purpose check_tols() allow users ensure proposed input tols optweight() correct number entries order. especially important factor variables interactions included formula factor variables split several dummies interactions moved end variable list, can cause confusion potential error entering tols values. Factor variables internally split dummy variable level, user needs specify one tolerance value per original variable; check_tols() automatically expands tols input match newly created variables. Interactions (e.g., :b *b formula input) always sent end variable list even specified elsewhere formula. important run check_tols() ensure order proposed tols corresponds represented order covariates used optweight(). can run check_tols() tols input see order covariates required. check_tols() designed used primarily message printing print method, can also assign output object use input tols optweight(). Note one formula vector tolerance values can assessed time; multiple treatment periods, formula tolerance vector must entered separately.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/check_tols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct and Check Tolerance Input — check_tols","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  # Checking if the correct number of entries are included: check_tols(treat ~ age + educ + married +                 nodegree + re74, data = lalonde,                 tols = c(.01, .02, .03, .04)) #> `tols` must contain 5 numbers; 4 were included. All values in the #> output have been assigned NA. #> - vars: #> \t  # Checking the order of interactions; notice they go # at the end even if specified at the beginning. The # .09 values are where the interactions might be expected # to be, but they are in fact not. c <- check_tols(treat ~ age:educ + married*race +                 nodegree + re74, data = lalonde,                 tols = c(.09, .01, .01, .09, .01, .01))  print(c, internal = TRUE) #> - tols: #>      married         race     nodegree         re74     age:educ married:race  #>         0.09         0.01         0.01         0.09         0.01         0.01  #>  #> - tols used internally by optweight: #>             married          race_black         race_hispan          race_white  #>                0.09                0.01                0.01                0.01  #>            nodegree                re74            age:educ  married:race_black  #>                0.01                0.09                0.01                0.01  #> married:race_hispan  married:race_white  #>                0.01                0.01"},{"path":"https://ngreifer.github.io/optweight/reference/optweight-package.html","id":null,"dir":"Reference","previous_headings":"","what":"optweight: Targeted Stable Balancing Weights Using Optimization — optweight-package","title":"optweight: Targeted Stable Balancing Weights Using Optimization — optweight-package","text":"Use optimization estimate weights balance covariates binary, multinomial, continuous treatments spirit Zubizarreta (2015) doi:10.1080/01621459.2015.1023805 . degree balance can specified covariate. addition, sampling weights can estimated allow sample generalize population specified given target moments covariates.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/optweight-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"optweight: Targeted Stable Balancing Weights Using Optimization — optweight-package","text":"Maintainer: Noah Greifer noah.greifer@gmail.com (ORCID)","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting Function for Stable Balancing Weights — optweight.fit","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"optweight.fit() performs optimization (via osqp) optweight() , cases, used directly. Little processing inputs performed, must given exactly described .","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"","code":"optweight.fit(   treat.list,   covs.list,   tols,   estimand = \"ATE\",   targets = NULL,   s.weights = NULL,   b.weights = NULL,   focal = NULL,   norm = \"l2\",   std.binary = FALSE,   std.cont = TRUE,   min.w = 1e-08,   verbose = FALSE,   force = FALSE,   ... )"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"treat.list list containing one vector treatment statuses time point. Non-numeric (.e., factor character) vectors allowed. covs.list list containing one matrix covariates balanced time point. matrices must numeric full rank. tols list containing one vector balance tolerance values time point. estimand desired estimand, determines target population. binary treatments, can \"ATE\", \"ATT\", \"ATC\", NULL. multi-category treatments, can \"ATE\", \"ATT\", NULL. continuous treatments, can \"ATE\" NULL. default \"ATE\". longitudinal treatments, \"ATE\" supported. estimand ignored targets non-NULL. estimand targets NULL, targeting take place. See Details. targets vector target population mean values baseline covariate. resulting weights yield sample means within tols/2 units target values covariate. NULL NA, estimand used determine targets. Otherwise, estimand ignored. target values NA, corresponding variable targeted weighted mean wherever weights yield smallest variance. s.weights vector sampling weights. Optimization occurs product sampling weights estimated weights. b.weights vector base weights. Default vector 1s. desired norm distance estimated weights base weights minimized. focal multi-categorical treatments used \"ATT\" requested, group consider \"treated\" focal group. group weighted, groups weighted resemble focal group. norm string containing name norm corresponding objective function minimize. options \"l1\" L1 norm, \"l2\" L2 norm (default), \"linf\" L\\(\\infty\\) norm. L1 norm minimizes average absolute distance weight base weights; L2 norm minimizes average squared distance weight base weights; L\\(\\infty\\) norm minimizes largest absolute distance weight base weights. L2 norm direct correspondence effective sample size, making ideal criterion interest. std.binary, std.cont logical; whether tolerances standardized mean units (TRUE) raw units (FALSE) binary variables continuous variables, respectively. default FALSE std.binary raw proportion differences make sense standardized mean difference binary variables. arguments analogous binary continuous arguments bal.tab() cobalt. min.w single numeric value less 1 smallest allowable weight. analyses require nonzero weights units, small, nonzero minimum may desirable. likely (slightly) increase variance resulting weights depending magnitude minimum. default 1e-8, materially change properties weights minimum 0 prevents warnings packages use weights estimate treatment effects. verbose Whether information optimization problem solution printed. information contains many iterations took estimate weights whether solution optimal. force Stable balancing weights currently valid use longitudinal treatments, produce error message attempted. Set TRUE bypass error message. ... Options passed osqp::osqpSettings() use par arguments osqp::solve_osqp(). See Details defaults.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"optweight.fit object following elements: w estimated weights, one unit. duals data.frame containing dual variables covariate, list thereof. See Zubizarreta (2015) interpretation values. info info component output osqp::solve_osqp(), contains information performance optimization termination.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"optweight.fit() transforms inputs required inputs osqp::solve_osqp(), (sparse) matrices vectors, supplies outputs (weights, dual variables, convergence information) back optweight(). Little processing inputs performed, normally handled optweight(). default values parameters sent osqp::solve_osqp() osqp::osqpSettings(). following differences: max_iter set 20000, eps_abs eps_rel set 1e-8 (.e., \\(10^{-8}\\)), adaptive_rho_interval set 10. values . Note stable balancing weights longitudinal treatments valid used research done.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"Wang, Y., & Zubizarreta, J. R. (2020). Minimal dispersion approximately balancing weights: Asymptotic properties practical considerations. Biometrika, 107(1), 93–105. doi:10.1093/biomet/asz050 Yiu, S., & Su, L. (2018). Covariate association eliminating weights: unified weighting framework causal effect estimation. Biometrika. doi:10.1093/biomet/asy015 Zubizarreta, J. R. (2015). Stable Weights Balance Covariates Estimation Incomplete Outcome Data. Journal American Statistical Association, 110(511), 910–922. doi:10.1080/01621459.2015.1023805","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/optweight.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting Function for Stable Balancing Weights — optweight.fit","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  treat.list <- list(lalonde$treat) covs.list <- list(splitfactor(lalonde[2:8], drop.first = \"if2\")) tols.list <- list(rep(.01, ncol(covs.list[[1]])))  ow.fit <- optweight.fit(treat.list,                         covs.list,                         tols = tols.list,                         estimand = \"ATE\",                         norm = \"l2\")"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Stable Balancing Weights — optweight","title":"Estimate Stable Balancing Weights — optweight","text":"Estimate stable balancing weights treatments covariates specified formula. degree balance covariate specified tols target population can specified targets estimand. See Zubizarreta (2015), Wang & Zubizarreta (2019), Yiu & Su (2018) details properties weights methods used fit .","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Stable Balancing Weights — optweight","text":"","code":"optweight(   formula,   data = NULL,   tols = 0,   estimand = \"ATE\",   targets = NULL,   s.weights = NULL,   b.weights = NULL,   focal = NULL,   verbose = FALSE,   ... )"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Stable Balancing Weights — optweight","text":"formula formula treatment variable left hand side covariates balanced right hand side, list thereof. See glm() details. Interactions functions covariates allowed. data optional data set form data frame contains variables formula. tols vector balance tolerance values covariate, list thereof. resulting weighted balance statistics least small values. one value supplied, applied covariates. Can also output call check_tols() point treatments. See Details. estimand desired estimand, determines target population. binary treatments, can \"ATE\", \"ATT\", \"ATC\", NULL. multi-category treatments, can \"ATE\", \"ATT\", NULL. continuous treatments, can \"ATE\" NULL. default \"ATE\". longitudinal treatments, \"ATE\" supported. estimand ignored targets non-NULL. estimand targets NULL, targeting take place. See Details. targets vector target population mean values baseline covariate. resulting weights yield sample means within tols/2 units target values covariate. NULL NA, estimand used determine targets. Otherwise, estimand ignored. target values NA, corresponding variable targeted weighted mean wherever weights yield smallest variance. Can also output call check_targets(). See Details. s.weights vector sampling weights name variable data contains sampling weights. Optimization occurs product sampling weights estimated weights. b.weights vector base weights name variable data contains base weights. supplied, desired norm distance estimated weights base weights minimized. focal multi-category treatments used \"ATT\" requested, group consider \"treated\" focal group. group weighted, groups weighted like focal group. specified, estimand automatically set \"ATT\". verbose Whether information optimization problem solution printed. information contains many iterations took estimate weights whether solution optimal. ... Arguments passed optweight.fit norm string containing name norm corresponding objective function minimize. options \"l1\" L1 norm, \"l2\" L2 norm (default), \"linf\" L\\(\\infty\\) norm. L1 norm minimizes average absolute distance weight base weights; L2 norm minimizes average squared distance weight base weights; L\\(\\infty\\) norm minimizes largest absolute distance weight base weights. L2 norm direct correspondence effective sample size, making ideal criterion interest. std.binary,std.cont logical; whether tolerances standardized mean units (TRUE) raw units (FALSE) binary variables continuous variables, respectively. default FALSE std.binary raw proportion differences make sense standardized mean difference binary variables. arguments analogous binary continuous arguments bal.tab() cobalt. min.w single numeric value less 1 smallest allowable weight. analyses require nonzero weights units, small, nonzero minimum may desirable. likely (slightly) increase variance resulting weights depending magnitude minimum. default 1e-8, materially change properties weights minimum 0 prevents warnings packages use weights estimate treatment effects. force Stable balancing weights currently valid use longitudinal treatments, produce error message attempted. Set TRUE bypass error message.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Stable Balancing Weights — optweight","text":"one time point specified, optweight object following elements: weights estimated weights, one unit. treat values treatment variable. covs covariates used fitting. includes raw covariates, may altered fitting process. s.weights provided sampling weights. b.weights provided base weights. estimand estimand requested. focal focal variable ATT requested multi-category treatment. call function call. tols tolerance values covariate. duals data.frame containing dual variables covariate. See Details interpretation values. info info component output osqp::solve_osqp(), contains information performance optimization termination. Otherwise, multiple time points specified, optweightMSM object following elements: weights estimated weights, one unit. treat.list list values treatment variables time point. covs.list list covariates time point used fitting. includes raw covariates, may altered fitting process. s.weights provided sampling weights. b.weights provided base weights. call function call. tols list tolerance values covariate time point. duals list data.frames containing dual variables covariate time point. See Details interpretation values. info info component output osqp::solve_osqp(), contains information performance optimization termination.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Stable Balancing Weights — optweight","text":"optimization performed lower-level function optweight.fit() using osqp::solve_osqp() osqp package, provides straightforward interface specifying constraints objective function quadratic optimization problems uses fast flexible solving algorithm. binary multi-category treatments, weights estimated weighted mean differences covariates within given tolerance thresholds (unless std.binary std.cont TRUE, case standardized mean differences considered binary continuous variables, respectively). covariate \\(x\\) specified tolerance \\(\\delta\\), weighted means group within \\(\\delta\\) . Additionally, ATE specified estimand target population specified, weighted means group within \\(\\delta/2\\) target means; ensures generalizability population original sample drawn. standardized tolerance values requested, standardization factor corresponds estimand requested: ATE requested target population specified, standardization factor square root average variance covariate across treatment groups, ATT ATC requested, standardization factor standard deviation covariate focal group. standardization factor always unweighted. continuous treatments, weights estimated weighted correlation treatment covariate within specified tolerance threshold. ATE requested target population specified, means weighted covariates treatment restricted equal target population ensure generalizability desired target population. weighted correlation computed weighted covariance divided product unweighted standard deviations. means used center variables computing covariance specified target population. longitudinal treatments, \"wide\" data sets, row corresponds unit's entire variable history, supported. can use reshape() functions transform data format; see example documentation weightitMSM() WeightIt package. Currently, longitudinal treatments recommended use stable balancing weights validated.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"dual-variables","dir":"Reference","previous_headings":"","what":"Dual Variables","title":"Estimate Stable Balancing Weights — optweight","text":"Two types constraints may associated covariate: target constraints balance constraints. Target constraints require mean covariate (near) specific target value treatment group (whole group treatment continuous). Balance constraints require means covariate pairs treatments near . binary multi-category treatments, balance constraints redundant target constraints provided variable. continuous variables, balance constraints refer correlation treatment covariate redundant target constraints. duals component output, covariate dual variable nonredundant constraint placed . dual variable constraint instantaneous rate change objective function optimum due change constraint. relationship linear, large changes constraint exactly map onto corresponding changes objective function optimum, close small changes constraint. example, covariate balance constraint .01 corresponding dual variable .4, increasing (.e., relaxing) constraint .025 decrease value objective function optimum approximately \\((.025 - .01) * .4 = .006\\). L2 norm used, change corresponds change variance weights, directly affects effective sample size (though magnitude effect depends original value effective sample size). factor variables, optweight() takes sum absolute dual variables constraints levels reports single dual variable variable . summed dual variable works way dual variables continuous variables .","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"solving-convergence-failure","dir":"Reference","previous_headings":"","what":"Solving Convergence Failure","title":"Estimate Stable Balancing Weights — optweight","text":"Sometimes optimization fail converge solution. variety reasons might happen, include constraints nearly impossible satisfy optimization surface relatively flat. can hard know exact cause solve , section offers solutions one might try. Rarely problem iterations, though possible. problems can solved default 200,000 iterations, sometimes can help increase number max_iter argument. Usually, though, just ends taking time without solution found. problem constraints tight, can helpful loosen constraints. Sometimes examining dual variables solution failed converge can reveal constraints causing problem. Sometimes suboptimal solution possible; solution satisfy constraints exactly come pretty close. allow solutions, arguments eps_abs eps_rel can increased 1e-8 larger values. adjusted together since must satisfied convergence occur; can done easily using shortcut argument eps, changes eps_abs eps_rel set value. continuous treatments, solutions failed converge may still useable. Make sure assess balance examine weights even optimal solution found, solution found may good enough.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Stable Balancing Weights — optweight","text":"Wang, Y., & Zubizarreta, J. R. (2020). Minimal dispersion approximately balancing weights: Asymptotic properties practical considerations. Biometrika, 107(1), 93–105. doi:10.1093/biomet/asz050 Yiu, S., & Su, L. (2018). Covariate association eliminating weights: unified weighting framework causal effect estimation. Biometrika. doi:10.1093/biomet/asy015 Zubizarreta, J. R. (2015). Stable Weights Balance Covariates Estimation Incomplete Outcome Data. Journal American Statistical Association, 110(511), 910–922. doi:10.1080/01621459.2015.1023805","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/optweight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Stable Balancing Weights — optweight","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  #Balancing covariates between treatment groups (binary) (ow1 <- optweight(treat ~ age + educ + married +                     nodegree + re74, data = lalonde,                   tols = c(.01, .02, .03, .04, .05),                   estimand = \"ATE\")) #> An optweight object #>  - number of obs.: 614 #>  - sampling weights: none #>  - treatment: 2-category #>  - estimand: ATE #>  - covariates: age, educ, married, nodegree, re74 bal.tab(ow1) #> Balance Measures #>             Type Diff.Adj #> age      Contin.     0.00 #> educ     Contin.     0.02 #> married   Binary    -0.03 #> nodegree  Binary     0.04 #> re74     Contin.    -0.05 #>  #> Effective sample sizes #>            Control Treated #> Unadjusted   429.    185.  #> Adjusted     415.3   125.3  #Exactly alancing covariates with respect to race (multi-category) (ow2 <- optweight(race ~ age + educ + married +                     nodegree + re74, data = lalonde,                   tols = 0, estimand = \"ATT\", focal = \"black\")) #> An optweight object #>  - number of obs.: 614 #>  - sampling weights: none #>  - treatment: 3-category (black, hispan, white) #>  - estimand: ATT (focal: black) #>  - covariates: age, educ, married, nodegree, re74 bal.tab(ow2) #> Balance summary across all treatment pairs #>             Type Max.Diff.Adj #> age      Contin.            0 #> educ     Contin.            0 #> married   Binary            0 #> nodegree  Binary            0 #> re74     Contin.            0 #>  #> Effective sample sizes #>            hispan  white black #> Unadjusted  72.   299.     243 #> Adjusted    45.96 181.39   243  # #Balancing covariates with longitudinal treatments # #NOT VALID; DO NOT DO THIS. # library(\"twang\") # data(\"iptwExWide\") # # ##Weighting more recent covariates more strictly # (ow3 <- optweight(list(tx1 ~ use0 + gender + age, #                        tx2 ~ tx1 + use1 + use0  + gender + #                          age, #                        tx3 ~ tx2 + use2 + tx1 + use1 + #                          use0 + gender + age), #                   data = iptwExWide, #                   tols = list(c(.001, .001, .001), #                               c(.001, .001, .01, .01, .01), #                               c(.001, .001, .01, .01, #                                 .1, .1, .1)))) # bal.tab(ow3)  #Balancing covariates between treatment groups (binary) #and requesting a specified target population (ow4a <- optweight(treat ~ age + educ + married +                      nodegree + re74, data = lalonde,                    tols = 0,                    targets = c(26, 12, .4, .5, 1000),                    estimand = NULL)) #> An optweight object #>  - number of obs.: 614 #>  - sampling weights: none #>  - treatment: 2-category #>  - estimand: targets #>  - covariates: age, educ, married, nodegree, re74 bal.tab(ow4a, disp.means = TRUE) #> Note: `s.d.denom` not specified; assuming \"pooled\". #> Balance Measures #>             Type M.0.Adj M.1.Adj Diff.Adj #> age      Contin.    26.0    26.0       -0 #> educ     Contin.    12.0    12.0       -0 #> married   Binary     0.4     0.4       -0 #> nodegree  Binary     0.5     0.5       -0 #> re74     Contin.  1000.0  1000.0       -0 #>  #> Effective sample sizes #>            Control Treated #> Unadjusted  429.    185.   #> Adjusted    158.04   64.09  #Balancing covariates between treatment groups (binary) #and not requesting a target population (ow4b <- optweight(treat ~ age + educ + married +                      nodegree + re74, data = lalonde,                    tols = 0,                    targets = NULL,                    estimand = NULL)) #> An optweight object #>  - number of obs.: 614 #>  - sampling weights: none #>  - treatment: 2-category #>  - estimand: targets #>  - covariates: age, educ, married, nodegree, re74 bal.tab(ow4b, disp.means = TRUE) #> Note: `s.d.denom` not specified; assuming \"pooled\". #> Balance Measures #>             Type   M.0.Adj   M.1.Adj Diff.Adj #> age      Contin.   26.4160   26.4160        0 #> educ     Contin.   10.3547   10.3547        0 #> married   Binary    0.3615    0.3615       -0 #> nodegree  Binary    0.6305    0.6305       -0 #> re74     Contin. 3908.9059 3908.9059        0 #>  #> Effective sample sizes #>            Control Treated #> Unadjusted  429.    185.   #> Adjusted    382.74  139.23"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"optweight.svy.fit() performs optimization (via osqp) optweight.svy() , cases, used directly. Little processing inputs performed, must given exactly described .","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"","code":"optweight.svy.fit(   covs,   tols = 0,   targets,   s.weights = NULL,   b.weights = NULL,   norm = \"l2\",   std.binary = FALSE,   std.cont = TRUE,   min.w = 1e-08,   verbose = FALSE,   ... )"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"covs matrix covariates targeted. must numeric full rank. tols vector target balance tolerance values. targets vector target population mean values covariate. resulting weights yield sample means within tols units target values covariate. target values NA, corresponding variable targeted weighted mean wherever weights yield smallest variance. ensure weighted mean covariate equal unweighted mean (.e., original mean target mean), original mean must supplied target. s.weights vector sampling weights. Optimization occurs product sampling weights estimated weights. b.weights vector base weights. Default vector 1s. desired norm distance estimated weights base weights minimized. norm string containing name norm corresponding objective function minimize. options \"l1\" L1 norm, \"l2\" L2 norm (default), \"linf\" L\\(\\infty\\) norm. L1 norm minimizes average absolute distance weight base weights; L2 norm minimizes average squared distance weight base weights; L\\(\\infty\\) norm minimizes largest absolute distance weight base weights. L2 norm direct correspondence effective sample size, making ideal criterion interest. std.binary, std.cont logical; whether tolerances standardized mean units (TRUE) raw units (FALSE) binary variables continuous variables, respectively. default FALSE std.binary raw proportion differences make sense standardized mean difference binary variables. arguments analogous binary continuous arguments bal.tab() cobalt. min.w single numeric value less 1 smallest allowable weight. analyses require nonzero weights units, small, nonzero minimum may desirable. likely (slightly) increase variance resulting weights depending magnitude minimum. default 1e-8, materially change properties weights minimum 0 prevents warnings packages use weights estimate treatment effects. verbose Whether information optimization problem solution printed. information contains many iterations took estimate weights whether solution optimal. ... Options passed osqp::osqpSettings() use par arguments osqp::solve_osqp(). See Details defaults.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"optweight.svy.fit object following elements: w estimated weights, one unit. duals data.frame containing dual variables covariate. See Zubizarreta (2015) interpretation values. info info component output osqp::solve_osqp(), contains information performance optimization termination.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"optweight.svy.fit() transforms inputs required inputs osqp::solve_osqp(), (sparse) matrices vectors, supplies outputs (weights, duals variables, convergence information) back optweight.svy(). Little processing inputs performed, normally handled optweight.svy(). default values parameters sent osqp::solve_osqp() osqp::osqpSettings(). following differences: max_iter set 20000, eps_abs eps_rel set 1e-8 (.e., \\(10^{-8}\\)), adaptive_rho_interval set 10. values .","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"Wang, Y., & Zubizarreta, J. R. (2020). Minimal dispersion approximately balancing weights: Asymptotic properties practical considerations. Biometrika, 107(1), 93–105. doi:10.1093/biomet/asz050 Yiu, S., & Su, L. (2018). Covariate association eliminating weights: unified weighting framework causal effect estimation. Biometrika. doi:10.1093/biomet/asy015 Zubizarreta, J. R. (2015). Stable Weights Balance Covariates Estimation Incomplete Outcome Data. Journal American Statistical Association, 110(511), 910–922. doi:10.1080/01621459.2015.1023805","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting Function for Optweight for Survey Weights — optweight.svy.fit","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  covs <- splitfactor(lalonde[c(\"age\", \"educ\", \"race\",                   \"married\", \"nodegree\")],                   drop.first = FALSE)  targets <- c(23, 9, .3, .3, .4, .2, .5)  tols <- rep(0, 7)  ows.fit <- optweight.svy.fit(covs,                              tols = tols,                              targets = targets,                              norm = \"l2\")  #Unweighted means col_w_mean(covs) #>         age        educ  race_black race_hispan  race_white     married  #>  27.3631922  10.2687296   0.3957655   0.1172638   0.4869707   0.4153094  #>    nodegree  #>   0.6302932   #Weighted means; same as targets col_w_mean(covs, w = ows.fit$w) #>         age        educ  race_black race_hispan  race_white     married  #>        23.0         9.0         0.3         0.3         0.4         0.2  #>    nodegree  #>         0.5"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Targeting Weights Using Optimization — optweight.svy","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"Estimate targeting weights covariates specified formula. target means specified targets maximum distance weighted covariate mean corresponding target mean specified tols. See Zubizarreta (2015) details properties weights methods used fit .","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"","code":"optweight.svy(   formula,   data = NULL,   tols = 0,   targets = NULL,   s.weights = NULL,   b.weights = NULL,   verbose = FALSE,   ... )"},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"formula formula nothing left hand side covariates targeted right hand side. See glm() details. Interactions functions covariates allowed. data optional data set form data frame contains variables formula. tols vector target balance tolerance values covariate. resulting weighted covariate means away targets specified values. one value supplied, applied covariates. Can also output call check_tols(). targets vector target population mean values covariate. resulting weights yield sample means within tols units target values covariate. target values NA, corresponding variable targeted weighted mean wherever weights yield smallest variance. ensure weighted mean covariate equal unweighted mean (.e., original mean target mean), original mean must supplied target. s.weights vector sampling weights name variable data contains sampling weights. Optimization occurs product sampling weights estimated weights. b.weights vector base weights name variable data contains base weights. supplied, desired norm distance estimated weights base weights minimized. verbose Whether information optimization problem solution printed. information contains many iterations took estimate weights whether solution optimal. ... Arguments passed optweight.svy.fit norm string containing name norm corresponding objective function minimize. options \"l1\" L1 norm, \"l2\" L2 norm (default), \"linf\" L\\(\\infty\\) norm. L1 norm minimizes average absolute distance weight base weights; L2 norm minimizes average squared distance weight base weights; L\\(\\infty\\) norm minimizes largest absolute distance weight base weights. L2 norm direct correspondence effective sample size, making ideal criterion interest. std.binary,std.cont logical; whether tolerances standardized mean units (TRUE) raw units (FALSE) binary variables continuous variables, respectively. default FALSE std.binary raw proportion differences make sense standardized mean difference binary variables. arguments analogous binary continuous arguments bal.tab() cobalt. min.w single numeric value less 1 smallest allowable weight. analyses require nonzero weights units, small, nonzero minimum may desirable. likely (slightly) increase variance resulting weights depending magnitude minimum. default 1e-8, materially change properties weights minimum 0 prevents warnings packages use weights estimate treatment effects.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"optweight.svy object following elements: weights estimated weights, one unit. covs covariates used fitting. includes raw covariates, may altered fitting process. s.weights provided sampling weights. call function call. tols tolerance values covariate. duals data.frame containing dual variables covariate. See Details interpretation values. info info component output osqp::solve_osqp(), contains information performance optimization termination.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"optimization performed lower-level function optweight.svy.fit() using osqp::solve_osqp() osqp package, provides straightforward interface specifying constraints objective function quadratic optimization problems uses fast flexible solving algorithm. Weights estimated standardized differences weighted covariate means corresponding targets within given tolerance thresholds (unless std.binary std.cont FALSE, case unstandardized mean differences considered binary continuous variables, respectively). covariate \\(x\\) specified tolerance \\(\\delta\\), weighted mean within \\(\\delta\\) target. standardized tolerance values requested, standardization factor standard deviation covariate whole sample. standardization factor always unweighted. See optweight() help page information interpreting dual variables solving convergence failure.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"Stellato, B., Banjac, G., Goulart, P., Boyd, S., & Bansal, V. (2024). osqp: Quadratic Programming Solver using 'OSQP' Library R package version 0.6.3.3. doi:10.32614/CRAN.package.osqp Zubizarreta, J. R. (2015). Stable Weights Balance Covariates Estimation Incomplete Outcome Data. Journal American Statistical Association, 110(511), 910–922. doi:10.1080/01621459.2015.1023805","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/optweight.svy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Targeting Weights Using Optimization — optweight.svy","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  cov.formula <- ~ age + educ + race + married +                       nodegree  targets <- check_targets(cov.formula, data = lalonde,                         targets = c(23, 9, .3, .3, .4,                                     .2, .5))  tols <- check_tols(cov.formula, data = lalonde,                    tols = 0)  ows <- optweight.svy(cov.formula,                      data = lalonde,                      tols = tols,                      targets = targets) ows #> An optweight.svy object #>  - number of obs.: 614 #>  - sampling weights: none #>  - covariates: age, educ, race, married, nodegree  #Unweighted means col_w_mean(ows$covs) #>         age        educ  race_black race_hispan  race_white     married  #>  27.3631922  10.2687296   0.3957655   0.1172638   0.4869707   0.4153094  #>    nodegree  #>   0.6302932   #Weighted means; same as targets col_w_mean(ows$covs, w = ows$weights) #>         age        educ  race_black race_hispan  race_white     married  #>        23.0         9.0         0.3         0.3         0.4         0.2  #>    nodegree  #>         0.5"},{"path":"https://ngreifer.github.io/optweight/reference/plot.optweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","title":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","text":"Plots dual variables resulting optweight() way similar figure 2 Zubizarreta (2015), explained interpret values. represent cost changing constraint variance resulting weights. covariates large values dual variable, tightening constraint increase variability weights, loosening constraint decrease variability weights, greater extent covariate small values dual variable.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/plot.optweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","text":"","code":"# S3 method for class 'optweight' plot(x, ...)  # S3 method for class 'optweightMSM' plot(x, which.time = 1, ...)  # S3 method for class 'optweight.svy' plot(x, ...)"},{"path":"https://ngreifer.github.io/optweight/reference/plot.optweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","text":"x optweight optweight.svy object; output call optweight() optweight.svy(). ... Ignored. .time longitudinal treatments, time period display. one may displayed time.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/plot.optweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","text":"ggplot object can used ggplot2 functions.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/plot.optweight.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","text":"Zubizarreta, J. R. (2015). Stable Weights Balance Covariates Estimation Incomplete Outcome Data. Journal American Statistical Association, 110(511), 910–922. doi:10.1080/01621459.2015.1023805","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/plot.optweight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Dual Variables for Assessing Balance Constraints — plot.optweight","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  #Balancing covariates between treatment groups (binary) ow1 <- optweight(treat ~ age + educ + married +                 nodegree + re74, data = lalonde,                 tols = c(.1, .1, .1, .1, .1),                 estimand = \"ATT\")  summary(ow1) # Note the coefficient of variation #> Summary of weights: #>  #> - Weight ranges: #>         Min                                  Max #> treated   1                   ||          1.0000 #> control   0 |---------------------------| 1.5946 #>  #> - Units with 5 greatest weights by group: #>                                             #>               1      2      3      4      5 #>  treated      1      1      1      1      1 #>              79    118    127    156    164 #>  control 1.5946 1.5946 1.5946 1.5946 1.5946 #>  #>         RMSE Dev Mean Abs Dev Max Abs Dev # Zeros #> treated   0.0000       0.0000           0       0 #> control   0.5319       0.4619           1       0 #>  #> - Effective Sample Sizes: #>            Control Treated #> Unweighted 429.000     185 #> Weighted   334.408     185 #>               # and effective sample size (ESS)  plot(ow1) # age has a low value, married is high   ow2 <- optweight(treat ~ age + educ + married +                 nodegree + re74, data = lalonde,                 tols = c(0, .1, .1, .1, .1),                 estimand = \"ATT\")  summary(ow2) # Notice that tightening the constraint #> Summary of weights: #>  #> - Weight ranges: #>         Min                                  Max #> treated   1                  ||           1.0000 #> control   0 |---------------------------| 1.7539 #>  #> - Units with 5 greatest weights by group: #>                                             #>               1      2      3      4      5 #>  treated      1      1      1      1      1 #>             419    404    412    387    395 #>  control 1.7343 1.7441 1.7441 1.7539 1.7539 #>  #>         RMSE Dev Mean Abs Dev Max Abs Dev # Zeros #> treated   0.0000       0.0000           0       0 #> control   0.5338       0.4649           1       0 #>  #> - Effective Sample Sizes: #>            Control Treated #> Unweighted 429.000     185 #> Weighted   333.863     185 #>               # on age had a negligible effect on the              # variability of the weights and ESS  ow3 <- optweight(treat ~ age + educ + married +                 nodegree + re74, data = lalonde,                 tols = c(.1, .1, 0, .1, .1),                 estimand = \"ATT\")  summary(ow3) # In contrast, tightening the constraint #> Summary of weights: #>  #> - Weight ranges: #>         Min                                  Max #> treated   1                ||             1.0000 #> control   0 |---------------------------| 1.8712 #>  #> - Units with 5 greatest weights by group: #>                                            #>              1      2      3      4      5 #>  treated     1      1      1      1      1 #>            419    404    412    387    395 #>  control 1.857 1.8641 1.8641 1.8712 1.8712 #>  #>         RMSE Dev Mean Abs Dev Max Abs Dev # Zeros #> treated   0.0000       0.0000           0       0 #> control   0.6763       0.6473           1       0 #>  #> - Effective Sample Sizes: #>            Control Treated #> Unweighted 429.000     185 #> Weighted   294.354     185 #>               # on married had a large effect on the              # variability of the weights, shrinking              # the ESS"},{"path":"https://ngreifer.github.io/optweight/reference/summary.optweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize, print, and plot information about estimated weights — summary.optweight","title":"Summarize, print, and plot information about estimated weights — summary.optweight","text":"functions summarize weights resulting call optweight() optweight.svy(). summary() produces summary statistics distribution weights, including range variability, effective sample size weighted sample (computing using formula McCaffrey, Rudgeway, & Morral, 2004). plot() creates histogram weights.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/summary.optweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize, print, and plot information about estimated weights — summary.optweight","text":"","code":"# S3 method for class 'optweight' summary(object, top = 5, ignore.s.weights = FALSE, ...)  # S3 method for class 'optweightMSM' summary(object, top = 5, ignore.s.weights = FALSE, ...)  # S3 method for class 'optweight.svy' summary(object, top = 5, ignore.s.weights = FALSE, ...)  # S3 method for class 'summary.optweight' plot(x, ...)"},{"path":"https://ngreifer.github.io/optweight/reference/summary.optweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize, print, and plot information about estimated weights — summary.optweight","text":"object optweight, optweightMSM, optweight.svy object; output call optweight() optweight.svy(). top many largest smallest weights display. Default 5. ignore.s.weights Whether ignore sampling weights computing weight summary. FALSE, default, estimated weights multiplied sampling weights () values computed. ... Additional arguments. plot(), additional arguments passed graphics::hist() determine number bins, though ggplot2::geom_histogram() ggplot2 actually used create plot. x summary.optweight, summary.optweightMSM, summary.optweight.svy object; output call summary.optweight(), summary.optweightMSM(), ()summary.optweight.svy.","code":""},{"path":"https://ngreifer.github.io/optweight/reference/summary.optweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize, print, and plot information about estimated weights — summary.optweight","text":"point treatments (.e., optweight objects), summary() returns summary.optweight object following elements: weight.range range (minimum maximum) weight treatment group. weight.top units greatest weights treatment group; many included determined top. rms.dev root-mean-squared deviation estimated weights base weights (L2 norm). mean.abs.dev mean absolute deviation estimated weights base weights (L1 norm). max.abs.dev maximum absolute deviation estimated weights base weights (L\\(\\infinity\\) norm). num.zeros number units weight equal 0. effective.sample.size effective sample size treatment group weighting. longitudinal treatments (.e., optweightMSM objects), list elements treatment period. optweight.svy objects, list elements treatment group divisions. plot() returns ggplot object histogram displaying distribution estimated weights. estimand ATT ATC, weights non-focal group(s) displayed (since weights focal group 1). dotted line displayed mean weights (usually 1).","code":""},{"path":"https://ngreifer.github.io/optweight/reference/summary.optweight.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarize, print, and plot information about estimated weights — summary.optweight","text":"McCaffrey, D. F., Ridgeway, G., & Morral, . R. (2004). Propensity Score Estimation Boosted Regression Evaluating Causal Effects Observational Studies. Psychological Methods, 9(4), 403–425. doi:10.1037/1082-989X.9.4.403","code":""},{"path":[]},{"path":"https://ngreifer.github.io/optweight/reference/summary.optweight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize, print, and plot information about estimated weights — summary.optweight","text":"","code":"library(\"cobalt\") data(\"lalonde\", package = \"cobalt\")  #Balancing covariates between treatment groups (binary) (ow1 <- optweight(treat ~ age + educ + married +                 nodegree + re74, data = lalonde,                 tols = .001,                 estimand = \"ATT\")) #> An optweight object #>  - number of obs.: 614 #>  - sampling weights: none #>  - treatment: 2-category #>  - estimand: ATT (focal: 1) #>  - covariates: age, educ, married, nodegree, re74  (s <- summary(ow1)) #> Summary of weights: #>  #> - Weight ranges: #>         Min                                  Max #> treated   1           ||                  1.0000 #> control   0 |---------------------------| 3.0186 #>  #> - Units with 5 greatest weights by group: #>                                             #>               1      2      3      4      5 #>  treated      1      1      1      1      1 #>             404    226    224    111     84 #>  control 2.5106 2.5273 2.6258 2.7208 3.0186 #>  #>         RMSE Dev Mean Abs Dev Max Abs Dev # Zeros #> treated   0.0000        0.000      0.0000       0 #> control   0.7833        0.694      2.0186       0 #>  #> - Effective Sample Sizes: #>            Control Treated #> Unweighted 429.000     185 #> Weighted   265.882     185 #>   plot(s, breaks = 12)"},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-030","dir":"Changelog","previous_headings":"","what":"optweight 0.3.0","title":"optweight 0.3.0","text":"major rewrite, though without much change functionality. Documentation now roxygen2. Added b.weights argument supply base weights. supplied, rather minimizing variance weights, squared distance base weight minimized, mirroring functionality base.weights argument ebalance entropy balancing. L1 L$\\infinity$ norms now support base weights. Omitting base weights equivalent setting equal 1. summary() now displays L2, L1, L$\\infinity$ distance estimated weights base weights, number weights estimated 0. check_tols() check_targets() replaced check.tols() check.targets(), though latter can still used now. polish now TRUE default; slightly improves estimation. Formula interfaces now accept poly(x, .) matrix-generating functions variables, including rms-class-generating functions rms package (e.g., pol(), rcs(), etc.) (rms package must loaded use latter ones) basis-class-generating functions splines package (.e., bs() ns()). bug early version found @ahinton-mmc. Negative values now allowed min.w argument optweight.fit() optweight.svy.fit().","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-025","dir":"Changelog","previous_headings":"","what":"optweight 0.2.5","title":"optweight 0.2.5","text":"CRAN release: 2019-09-16 Reverting back using osqp instead rosqp now osqp works. cobalt back.","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-024","dir":"Changelog","previous_headings":"","what":"optweight 0.2.4","title":"optweight 0.2.4","text":"CRAN release: 2019-09-03 Reverting back using rosqp instead osqp due package failure. Also removed reliance cobalt favor MatchIt data. changes temporary.","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-023","dir":"Changelog","previous_headings":"","what":"optweight 0.2.3","title":"optweight 0.2.3","text":"CRAN release: 2019-08-25 rosqp package now osqp, faster fewer bugs. focal set, estimand automatically changed \"ATT\". past, focal ignored unless estimand = \"ATT\". Fixed bugs processing formula inputs. particular, functions can used inside lapply loops nested functions gracefully. bugs fixes small changes.","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-022","dir":"Changelog","previous_headings":"","what":"optweight 0.2.2","title":"optweight 0.2.2","text":"CRAN release: 2019-03-04 Fixed bug duals displaying improperly factor variables present.","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-021","dir":"Changelog","previous_headings":"","what":"optweight 0.2.1","title":"optweight 0.2.1","text":"CRAN release: 2019-01-16 Changed default min.w optweight.fit() optweight.svy.fit() 1E-8 0. ensures weights nonzero, can reduce bugs functions require nonzero weights (e.g, summ() jtools svyglm() survey`). Fixed warning occur interactions present model formula optweight(). optweights discovered invalid longitudinal treatments, attempting use optweight()optweight.fit() longitudinal treatments now produce error. can overridden setting force = TRUE, though recommended research done.","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-020","dir":"Changelog","previous_headings":"","what":"optweight 0.2.0","title":"optweight 0.2.0","text":"CRAN release: 2018-10-17 Added optweight.svy associated methods functions estimating survey weights using optimization. weights applied sample yield sample whose covariate means equal (within specified tolerance) given target values. Minor changes check.targets. now produce covariate means targets argument empty produce previous empty output, named vector NAs, targets = NULL. Changes dual variables processed displayed. Now, dual variable coming optweight represents change objective function corresponding 1-unit change tols. reported duals sum duals affected constraint, can now reliably predict change objective function change tols (obscured error-prone previously). distinction targeting duals balance duals maintained.","code":""},{"path":"https://ngreifer.github.io/optweight/news/index.html","id":"optweight-010","dir":"Changelog","previous_headings":"","what":"optweight 0.1.0","title":"optweight 0.1.0","text":"CRAN release: 2018-09-21 First version!","code":""}]
